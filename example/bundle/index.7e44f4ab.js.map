{"mappings":"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","sources":["example/index.js","node_modules/three/examples/jsm/loaders/LDrawLoader.js","node_modules/three/examples/jsm/utils/LDrawUtils.js","node_modules/three/examples/jsm/libs/stats.module.js"],"sourcesContent":["import {\n\tACESFilmicToneMapping,\n\tNoToneMapping,\n\tBox3,\n\tLoadingManager,\n\tSphere,\n\tColor,\n\tDoubleSide,\n\tMesh,\n\tMeshStandardMaterial,\n\tPlaneBufferGeometry,\n\tGroup,\n\tMeshPhysicalMaterial,\n\tWebGLRenderer,\n\tScene,\n\tPerspectiveCamera,\n\tMeshBasicMaterial,\n\tsRGBEncoding,\n\tCustomBlending,\n\tMatrix4\n} from 'three';\nimport { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { LDrawLoader } from 'three/examples/jsm/loaders/LDrawLoader.js';\nimport { LDrawUtils } from 'three/examples/jsm/utils/LDrawUtils.js';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\nimport { generateRadialFloorTexture } from './utils/generateRadialFloorTexture.js';\nimport { PathTracingSceneWorker } from '../src/workers/PathTracingSceneWorker.js';\nimport { PhysicalPathTracingMaterial, PathTracingRenderer, MaterialReducer, BlurredEnvMapGenerator } from '../src/index.js';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nconst envMaps = {\n\t'Royal Esplanade': 'https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/equirectangular/royal_esplanade_1k.hdr',\n\t'Moonless Golf': 'https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/equirectangular/moonless_golf_1k.hdr',\n\t'Overpass': 'https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/equirectangular/pedestrian_overpass_1k.hdr',\n\t'Venice Sunset': 'https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/equirectangular/venice_sunset_1k.hdr',\n\t'Small Studio': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/studio_small_05_1k.hdr',\n\t'Pfalzer Forest': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/phalzer_forest_01_1k.hdr',\n\t'Leadenhall Market': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/leadenhall_market_1k.hdr',\n\t'Kloppenheim': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/kloppenheim_05_1k.hdr',\n\t'Hilly Terrain': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/hilly_terrain_01_1k.hdr',\n\t'Circus Arena': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/circus_arena_1k.hdr',\n\t'Chinese Garden': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/chinese_garden_1k.hdr',\n\t'Autoshop': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/autoshop_01_1k.hdr',\n};\n\nconst models = window.MODEL_LIST || {};\n\nlet initialModel = Object.keys( models )[ 0 ];\nif ( window.location.hash ) {\n\n\tconst modelName = window.location.hash.substring( 1 ).replaceAll( '%20', ' ' );\n\tif ( modelName in models ) {\n\n\t\tinitialModel = modelName;\n\n\t}\n\n}\n\nconst params = {\n\n\tmultipleImportanceSampling: true,\n\tacesToneMapping: true,\n\tresolutionScale: 1 / window.devicePixelRatio,\n\ttilesX: 2,\n\ttilesY: 2,\n\tsamplesPerFrame: 1,\n\n\tmodel: initialModel,\n\n\tenvMap: envMaps[ 'Royal Esplanade' ],\n\n\tgradientTop: '#bfd8ff',\n\tgradientBottom: '#ffffff',\n\n\tenvironmentIntensity: 3.0,\n\tenvironmentBlur: 0.0,\n\tenvironmentRotation: 0,\n\n\tbackgroundType: 'Gradient',\n\tbgGradientTop: '#111111',\n\tbgGradientBottom: '#000000',\n\tbackgroundAlpha: 1.0,\n\tcheckerboardTransparency: true,\n\n\tenable: true,\n\tbounces: 3,\n\tpause: false,\n\n\tfloorColor: '#080808',\n\tfloorOpacity: 1.0,\n\tfloorRoughness: 0.1,\n\tfloorMetalness: 0.0\n\n};\n\nlet creditEl, loadingEl, samplesEl;\nlet floorPlane, gui, stats, sceneInfo;\nlet renderer, camera, ptRenderer, fsQuad, controls, scene;\nlet envMap, envMapGenerator;\nlet loadingModel = false;\nlet delaySamples = 0;\n\ninit();\n\nasync function init() {\n\n\tcreditEl = document.getElementById( 'credits' );\n\tloadingEl = document.getElementById( 'loading' );\n\tsamplesEl = document.getElementById( 'samples' );\n\n\trenderer = new WebGLRenderer( { antialias: true } );\n\trenderer.outputEncoding = sRGBEncoding;\n\trenderer.toneMapping = ACESFilmicToneMapping;\n\tdocument.body.appendChild( renderer.domElement );\n\n\tscene = new Scene();\n\n\tcamera = new PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 0.025, 500 );\n\tcamera.position.set( - 1, 0.25, 1 );\n\n\tptRenderer = new PathTracingRenderer( renderer );\n\tptRenderer.alpha = true;\n\tptRenderer.camera = camera;\n\tptRenderer.material = new PhysicalPathTracingMaterial();\n\tptRenderer.tiles.set( params.tiles, params.tiles );\n\tptRenderer.material.setDefine( 'FEATURE_GRADIENT_BG', 1 );\n\tptRenderer.material.setDefine( 'FEATURE_MIS', Number( params.multipleImportanceSampling ) );\n\tptRenderer.material.bgGradientTop.set( params.bgGradientTop );\n\tptRenderer.material.bgGradientBottom.set( params.bgGradientBottom );\n\n\tfsQuad = new FullScreenQuad( new MeshBasicMaterial( {\n\t\tmap: ptRenderer.target.texture,\n\t\tblending: CustomBlending\n\t} ) );\n\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\tcontrols.update();\n\tcontrols.addEventListener( 'change', () => {\n\n\t\tif ( params.tilesX * params.tilesY !== 1.0 ) {\n\n\t\t\tdelaySamples = 1;\n\n\t\t}\n\n\t\tptRenderer.reset();\n\n\t} );\n\n\tenvMapGenerator = new BlurredEnvMapGenerator( renderer );\n\n\tconst floorTex = generateRadialFloorTexture( 2048 );\n\tfloorPlane = new Mesh(\n\t\tnew PlaneBufferGeometry(),\n\t\tnew MeshStandardMaterial( {\n\t\t\tmap: floorTex,\n\t\t\ttransparent: true,\n\t\t\tcolor: 0x080808,\n\t\t\troughness: 0.1,\n\t\t\tmetalness: 0.0\n\t\t} )\n\t);\n\tfloorPlane.scale.setScalar( 3 );\n\tfloorPlane.rotation.x = - Math.PI / 2;\n\n\tstats = new Stats();\n\tdocument.body.appendChild( stats.dom );\n\trenderer.physicallyCorrectLights = true;\n\trenderer.toneMapping = ACESFilmicToneMapping;\n\tptRenderer.material.setDefine( 'FEATURE_GRADIENT_BG', 1 );\n\tscene.background = new Color( 0x060606 );\n\tptRenderer.tiles.set( params.tilesX, params.tilesY );\n\n\tupdateModel();\n\tupdateEnvMap();\n\tonResize();\n\n\tanimate();\n\n\twindow.addEventListener( 'resize', onResize );\n\n}\n\nfunction animate() {\n\n\trequestAnimationFrame( animate );\n\n\tstats.update();\n\n\tif ( loadingModel ) {\n\n\t\treturn;\n\n\t}\n\n\tif ( ptRenderer.samples < 1.0 || ! params.enable ) {\n\n\t\trenderer.render( scene, camera );\n\n\t}\n\n\tif ( params.enable && delaySamples === 0 ) {\n\n\t\tconst samples = Math.floor( ptRenderer.samples );\n\t\tsamplesEl.innerText = `samples: ${ samples }`;\n\n\t\tptRenderer.material.materials.updateFrom( sceneInfo.materials, sceneInfo.textures );\n\t\tptRenderer.material.filterGlossyFactor = 0.5;\n\t\tptRenderer.material.environmentIntensity = params.environmentIntensity;\n\t\tptRenderer.material.bounces = params.bounces;\n\t\tptRenderer.material.physicalCamera.updateFrom( camera );\n\n\t\tcamera.updateMatrixWorld();\n\n\t\tif ( ! params.pause || ptRenderer.samples < 1 ) {\n\n\t\t\tfor ( let i = 0, l = params.samplesPerFrame; i < l; i ++ ) {\n\n\t\t\t\tptRenderer.update();\n\n\t\t\t}\n\n\t\t}\n\n\t\trenderer.autoClear = false;\n\t\tfsQuad.render( renderer );\n\t\trenderer.autoClear = true;\n\n\t} else if ( delaySamples > 0 ) {\n\n\t\tdelaySamples --;\n\n\t}\n\n\tsamplesEl.innerText = `Samples: ${ Math.floor( ptRenderer.samples ) }`;\n\n}\n\nfunction onResize() {\n\n\tconst w = window.innerWidth;\n\tconst h = window.innerHeight;\n\tconst scale = params.resolutionScale;\n\tconst dpr = window.devicePixelRatio;\n\n\tptRenderer.setSize( w * scale * dpr, h * scale * dpr );\n\tptRenderer.reset();\n\n\trenderer.setSize( w, h );\n\trenderer.setPixelRatio( window.devicePixelRatio * scale );\n\tcamera.aspect = w / h;\n\tcamera.updateProjectionMatrix();\n\n}\n\nfunction buildGui() {\n\n\tif ( gui ) {\n\n\t\tgui.destroy();\n\n\t}\n\n\tgui = new GUI();\n\n\tgui.add( params, 'model', Object.keys( models ) ).onChange( updateModel );\n\n\tconst pathTracingFolder = gui.addFolder( 'path tracing' );\n\tpathTracingFolder.add( params, 'enable' );\n\tpathTracingFolder.add( params, 'pause' );\n\tpathTracingFolder.add( params, 'multipleImportanceSampling' ).onChange( v => {\n\n\t\tptRenderer.material.setDefine( 'FEATURE_MIS', Number( v ) );\n\t\tptRenderer.reset();\n\n\t} );\n\tpathTracingFolder.add( params, 'acesToneMapping' ).onChange( v => {\n\n\t\trenderer.toneMapping = v ? ACESFilmicToneMapping : NoToneMapping;\n\n\t} );\n\tpathTracingFolder.add( params, 'bounces', 1, 20, 1 ).onChange( () => {\n\n\t\tptRenderer.reset();\n\n\t} );\n\n\tconst resolutionFolder = gui.addFolder( 'resolution' );\n\tresolutionFolder.add( params, 'resolutionScale', 0.1, 1.0, 0.01 ).onChange( () => {\n\n\t\tonResize();\n\n\t} );\n\tresolutionFolder.add( params, 'samplesPerFrame', 1, 10, 1 );\n\tresolutionFolder.add( params, 'tilesX', 1, 10, 1 ).onChange( v => {\n\n\t\tptRenderer.tiles.x = v;\n\n\t} );\n\tresolutionFolder.add( params, 'tilesY', 1, 10, 1 ).onChange( v => {\n\n\t\tptRenderer.tiles.y = v;\n\n\t} );\n\tresolutionFolder.open();\n\n\tconst environmentFolder = gui.addFolder( 'environment' );\n\tenvironmentFolder.add( params, 'envMap', envMaps ).name( 'map' ).onChange( updateEnvMap );\n\tenvironmentFolder.add( params, 'environmentBlur', 0.0, 1.0 ).onChange( () => {\n\n\t\tupdateEnvBlur();\n\t\tptRenderer.reset();\n\n\t} ).name( 'env map blur' );\n\tenvironmentFolder.add( params, 'environmentIntensity', 0.0, 10.0 ).onChange( () => {\n\n\t\tptRenderer.reset();\n\n\t} ).name( 'intensity' );\n\tenvironmentFolder.add( params, 'environmentRotation', 0, 2 * Math.PI ).onChange( v => {\n\n\t\tptRenderer.material.environmentRotation.setFromMatrix4( new Matrix4().makeRotationY( v ) );\n\t\tptRenderer.reset();\n\n\t} );\n\tenvironmentFolder.open();\n\n\tconst backgroundFolder = gui.addFolder( 'background' );\n\tbackgroundFolder.add( params, 'backgroundType', [ 'Environment', 'Gradient' ] ).onChange( v => {\n\n\t\tptRenderer.material.setDefine( 'FEATURE_GRADIENT_BG', Number( v === 'Gradient' ) );\n\t\tif ( v === 'Gradient' ) {\n\n\t\t\tscene.background = new Color( 0x060606 );\n\n\t\t} else {\n\n\t\t\tscene.background = scene.environment;\n\n\t\t}\n\n\t\tptRenderer.reset();\n\n\t} );\n\tbackgroundFolder.addColor( params, 'bgGradientTop' ).onChange( v => {\n\n\t\tptRenderer.material.bgGradientTop.set( v );\n\t\tptRenderer.reset();\n\n\t} );\n\tbackgroundFolder.addColor( params, 'bgGradientBottom' ).onChange( v => {\n\n\t\tptRenderer.material.bgGradientBottom.set( v );\n\t\tptRenderer.reset();\n\n\t} );\n\tbackgroundFolder.add( params, 'backgroundAlpha', 0, 1 ).onChange( v => {\n\n\t\tptRenderer.material.backgroundAlpha = v;\n\t\tptRenderer.reset();\n\n\t} );\n\tbackgroundFolder.add( params, 'checkerboardTransparency' ).onChange( v => {\n\n\t\tif ( v ) document.body.classList.add( 'checkerboard' );\n\t\telse document.body.classList.remove( 'checkerboard' );\n\n\t} );\n\n\tconst floorFolder = gui.addFolder( 'floor' );\n\tfloorFolder.addColor( params, 'floorColor' ).onChange( v => {\n\n\t\tfloorPlane.material.color.set( v );\n\t\tptRenderer.reset();\n\n\t} );\n\tfloorFolder.add( params, 'floorRoughness', 0, 1 ).onChange( v => {\n\n\t\tfloorPlane.material.roughness = v;\n\t\tptRenderer.reset();\n\n\t} );\n\tfloorFolder.add( params, 'floorMetalness', 0, 1 ).onChange( v => {\n\n\t\tfloorPlane.material.metalness = v;\n\t\tptRenderer.reset();\n\n\t} );\n\tfloorFolder.add( params, 'floorOpacity', 0, 1 ).onChange( v => {\n\n\t\tfloorPlane.material.opacity = v;\n\t\tptRenderer.reset();\n\n\t} );\n\tfloorFolder.close();\n\n}\n\nfunction updateEnvMap() {\n\n\tnew RGBELoader()\n\t\t.load( params.envMap, texture => {\n\n\t\t\tif ( scene.environmentMap ) {\n\n\t\t\t\tscene.environment.dispose();\n\t\t\t\tenvMap.dispose();\n\n\t\t\t}\n\n\t\t\tenvMap = texture;\n\t\t\tupdateEnvBlur();\n\t\t\tptRenderer.reset();\n\n\t\t} );\n\n}\n\nfunction updateEnvBlur() {\n\n\tconst blurredEnvMap = envMapGenerator.generate( envMap, params.environmentBlur );\n\tptRenderer.material.envMapInfo.updateFrom( blurredEnvMap );\n\n\tscene.environment = blurredEnvMap;\n\tif ( params.backgroundType !== 'Gradient' ) {\n\n\t\tscene.background = blurredEnvMap;\n\n\t}\n\n}\n\nfunction convertOpacityToTransmission( model ) {\n\n\tmodel.traverse( c => {\n\n\t\tif ( c.material ) {\n\n\t\t\tconst material = c.material;\n\t\t\tif ( material.opacity < 0.65 && material.opacity > 0.2 ) {\n\n\t\t\t\tconst newMaterial = new MeshPhysicalMaterial();\n\t\t\t\tfor ( const key in material ) {\n\n\t\t\t\t\tif ( key in material ) {\n\n\t\t\t\t\t\tif ( material[ key ] === null ) {\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( material[ key ].isTexture ) {\n\n\t\t\t\t\t\t\tnewMaterial[ key ] = material[ key ];\n\n\t\t\t\t\t\t} else if ( material[ key ].copy && material[ key ].constructor === newMaterial[ key ].constructor ) {\n\n\t\t\t\t\t\t\tnewMaterial[ key ].copy( material[ key ] );\n\n\t\t\t\t\t\t} else if ( ( typeof material[ key ] ) === 'number' ) {\n\n\t\t\t\t\t\t\tnewMaterial[ key ] = material[ key ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tnewMaterial.opacity = 1.0;\n\t\t\t\tnewMaterial.transmission = 1.0;\n\t\t\t\tc.material = newMaterial;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n}\n\nasync function updateModel() {\n\n\tif ( gui ) {\n\n\t\tdocument.body.classList.remove( 'checkerboard' );\n\t\tgui.destroy();\n\t\tgui = null;\n\n\t}\n\n\tlet model;\n\tconst manager = new LoadingManager();\n\tconst modelInfo = models[ params.model ];\n\n\tloadingModel = true;\n\trenderer.domElement.style.visibility = 'hidden';\n\tsamplesEl.innerText = '--';\n\tcreditEl.innerText = '--';\n\tloadingEl.innerText = 'Loading';\n\tloadingEl.style.visibility = 'visible';\n\n\tscene.traverse( c => {\n\n\t\tif ( c.material ) {\n\n\t\t\tconst material = c.material;\n\t\t\tfor ( const key in material ) {\n\n\t\t\t\tif ( material[ key ] && material[ key ].isTexture ) {\n\n\t\t\t\t\tmaterial[ key ].dispose();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tif ( sceneInfo ) {\n\n\t\tscene.remove( sceneInfo.scene );\n\n\t}\n\n\n\tconst onFinish = async () => {\n\n\t\tif ( modelInfo.removeEmission ) {\n\n\t\t\tmodel.traverse( c => {\n\n\t\t\t\tif ( c.material ) {\n\n\t\t\t\t\tc.material.emissiveMap = null;\n\t\t\t\t\tc.material.emissiveIntensity = 0;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( modelInfo.opacityToTransmission ) {\n\n\t\t\tconvertOpacityToTransmission( model );\n\n\t\t}\n\n\t\tmodel.traverse( c => {\n\n\t\t\tif ( c.material ) {\n\n\t\t\t\tc.material.side = DoubleSide;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( modelInfo.postProcess ) {\n\n\t\t\tmodelInfo.postProcess( model );\n\n\t\t}\n\n\t\t// rotate model after so it doesn't affect the bounding sphere scale\n\t\tif ( modelInfo.rotation ) {\n\n\t\t\tmodel.rotation.set( ...modelInfo.rotation );\n\n\t\t}\n\n\t\t// center the model\n\t\tconst box = new Box3();\n\t\tbox.setFromObject( model );\n\t\tmodel.position\n\t\t\t.addScaledVector( box.min, - 0.5 )\n\t\t\t.addScaledVector( box.max, - 0.5 );\n\n\t\tconst sphere = new Sphere();\n\t\tbox.getBoundingSphere( sphere );\n\n\t\tmodel.scale.setScalar( 1 / sphere.radius );\n\t\tmodel.position.multiplyScalar( 1 / sphere.radius );\n\n\t\tbox.setFromObject( model );\n\n\t\tmodel.updateMatrixWorld();\n\n\t\tconst group = new Group();\n\t\tfloorPlane.position.y = box.min.y;\n\t\tgroup.add( model, floorPlane );\n\n\t\tconst reducer = new MaterialReducer();\n\t\treducer.process( group );\n\n\t\tconst generator = new PathTracingSceneWorker();\n\t\tconst result = await generator.generate( group, { onProgress: v => {\n\n\t\t\tconst percent = Math.floor( 100 * v );\n\t\t\tloadingEl.innerText = `Building BVH : ${ percent }%`;\n\n\t\t} } );\n\n\t\tsceneInfo = result;\n\t\tscene.add( sceneInfo.scene );\n\n\t\tconst { bvh, textures, materials } = result;\n\t\tconst geometry = bvh.geometry;\n\t\tconst material = ptRenderer.material;\n\n\t\tmaterial.bvh.updateFrom( bvh );\n\t\tmaterial.normalAttribute.updateFrom( geometry.attributes.normal );\n\t\tmaterial.tangentAttribute.updateFrom( geometry.attributes.tangent );\n\t\tmaterial.uvAttribute.updateFrom( geometry.attributes.uv );\n\t\tmaterial.materialIndexAttribute.updateFrom( geometry.attributes.materialIndex );\n\t\tmaterial.textures.setTextures( renderer, 2048, 2048, textures );\n\t\tmaterial.materials.updateFrom( materials, textures );\n\n\t\tgenerator.dispose();\n\n\t\tloadingEl.style.visibility = 'hidden';\n\n\t\tcreditEl.innerHTML = modelInfo.credit || '';\n\t\tcreditEl.style.visibility = modelInfo.credit ? 'visible' : 'hidden';\n\t\tparams.bounces = modelInfo.bounces || 3;\n\t\tbuildGui();\n\n\t\tloadingModel = false;\n\t\trenderer.domElement.style.visibility = 'visible';\n\t\tif ( params.checkerboardTransparency ) {\n\n\t\t\tdocument.body.classList.add( 'checkerboard' );\n\n\t\t}\n\n\t\tptRenderer.reset();\n\n\t};\n\n\tconst url = modelInfo.url;\n\tif ( /(gltf|glb)$/i.test( url ) ) {\n\n\t\tmanager.onLoad = onFinish;\n\t\tnew GLTFLoader( manager )\n\t\t\t.setMeshoptDecoder( MeshoptDecoder )\n\t\t\t.load(\n\t\t\t\turl,\n\t\t\t\tgltf => {\n\n\t\t\t\t\tmodel = gltf.scene;\n\n\t\t\t\t},\n\t\t\t\tprogress => {\n\n\t\t\t\t\tif ( progress.total !== 0 && progress.total >= progress.loaded ) {\n\n\t\t\t\t\t\tconst percent = Math.floor( 100 * progress.loaded / progress.total );\n\t\t\t\t\t\tloadingEl.innerText = `Loading : ${ percent }%`;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t);\n\n\t} else if ( /mpd$/i.test( url ) ) {\n\n\t\tmanager.onProgress = ( url, loaded, total ) => {\n\n\t\t\tconst percent = Math.floor( 100 * loaded / total );\n\t\t\tloadingEl.innerText = `Loading : ${ percent }%`;\n\n\t\t};\n\n\t\tconst loader = new LDrawLoader( manager );\n\t\tawait loader.preloadMaterials( 'https://raw.githubusercontent.com/gkjohnson/ldraw-parts-library/master/colors/ldcfgalt.ldr' );\n\t\tloader\n\t\t\t.setPartsLibraryPath( 'https://raw.githubusercontent.com/gkjohnson/ldraw-parts-library/master/complete/ldraw/' )\n\t\t\t.load(\n\t\t\t\turl,\n\t\t\t\tresult => {\n\n\t\t\t\t\tmodel = LDrawUtils.mergeObject( result );\n\t\t\t\t\tmodel.rotation.set( Math.PI, 0, 0 );\n\t\t\t\t\tmodel.traverse( c => {\n\n\t\t\t\t\t\tif ( c.isLineSegments ) {\n\n\t\t\t\t\t\t\tc.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( c.isMesh ) {\n\n\t\t\t\t\t\t\tc.material.roughness *= 0.01;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\t\t\t\t\tonFinish();\n\n\t\t\t\t},\n\t\t\t);\n\n\t}\n\n}\n","import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tFileLoader,\n\tGroup,\n\tLineBasicMaterial,\n\tLineSegments,\n\tLoader,\n\tMatrix4,\n\tMesh,\n\tMeshStandardMaterial,\n\tShaderMaterial,\n\tUniformsLib,\n\tUniformsUtils,\n\tVector3,\n\tRay\n} from 'three';\n\n// Special surface finish tag types.\n// Note: \"MATERIAL\" tag (e.g. GLITTER, SPECKLE) is not implemented\nconst FINISH_TYPE_DEFAULT = 0;\nconst FINISH_TYPE_CHROME = 1;\nconst FINISH_TYPE_PEARLESCENT = 2;\nconst FINISH_TYPE_RUBBER = 3;\nconst FINISH_TYPE_MATTE_METALLIC = 4;\nconst FINISH_TYPE_METAL = 5;\n\n// State machine to search a subobject path.\n// The LDraw standard establishes these various possible subfolders.\nconst FILE_LOCATION_AS_IS = 0;\nconst FILE_LOCATION_TRY_PARTS = 1;\nconst FILE_LOCATION_TRY_P = 2;\nconst FILE_LOCATION_TRY_MODELS = 3;\nconst FILE_LOCATION_TRY_RELATIVE = 4;\nconst FILE_LOCATION_TRY_ABSOLUTE = 5;\nconst FILE_LOCATION_NOT_FOUND = 6;\n\nconst MAIN_COLOUR_CODE = '16';\nconst MAIN_EDGE_COLOUR_CODE = '24';\n\nconst _tempVec0 = new Vector3();\nconst _tempVec1 = new Vector3();\n\nclass LDrawConditionalLineMaterial extends ShaderMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tdiffuse: {\n\t\t\t\t\t\tvalue: new Color()\n\t\t\t\t\t},\n\t\t\t\t\topacity: {\n\t\t\t\t\t\tvalue: 1.0\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: /* glsl */`\n\t\t\t\tattribute vec3 control0;\n\t\t\t\tattribute vec3 control1;\n\t\t\t\tattribute vec3 direction;\n\t\t\t\tvarying float discardFlag;\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <color_pars_vertex>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\t\t\t\t#include <clipping_planes_pars_vertex>\n\t\t\t\tvoid main() {\n\t\t\t\t\t#include <color_vertex>\n\n\t\t\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t\t// Transform the line segment ends and control points into camera clip space\n\t\t\t\t\tvec4 c0 = projectionMatrix * modelViewMatrix * vec4( control0, 1.0 );\n\t\t\t\t\tvec4 c1 = projectionMatrix * modelViewMatrix * vec4( control1, 1.0 );\n\t\t\t\t\tvec4 p0 = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tvec4 p1 = projectionMatrix * modelViewMatrix * vec4( position + direction, 1.0 );\n\n\t\t\t\t\tc0.xy /= c0.w;\n\t\t\t\t\tc1.xy /= c1.w;\n\t\t\t\t\tp0.xy /= p0.w;\n\t\t\t\t\tp1.xy /= p1.w;\n\n\t\t\t\t\t// Get the direction of the segment and an orthogonal vector\n\t\t\t\t\tvec2 dir = p1.xy - p0.xy;\n\t\t\t\t\tvec2 norm = vec2( -dir.y, dir.x );\n\n\t\t\t\t\t// Get control point directions from the line\n\t\t\t\t\tvec2 c0dir = c0.xy - p1.xy;\n\t\t\t\t\tvec2 c1dir = c1.xy - p1.xy;\n\n\t\t\t\t\t// If the vectors to the controls points are pointed in different directions away\n\t\t\t\t\t// from the line segment then the line should not be drawn.\n\t\t\t\t\tfloat d0 = dot( normalize( norm ), normalize( c0dir ) );\n\t\t\t\t\tfloat d1 = dot( normalize( norm ), normalize( c1dir ) );\n\t\t\t\t\tdiscardFlag = float( sign( d0 ) != sign( d1 ) );\n\n\t\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t\t#include <clipping_planes_vertex>\n\t\t\t\t\t#include <fog_vertex>\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\t\t\tuniform vec3 diffuse;\n\t\t\tuniform float opacity;\n\t\t\tvarying float discardFlag;\n\n\t\t\t#include <common>\n\t\t\t#include <color_pars_fragment>\n\t\t\t#include <fog_pars_fragment>\n\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t#include <clipping_planes_pars_fragment>\n\t\t\tvoid main() {\n\n\t\t\t\tif ( discardFlag > 0.5 ) discard;\n\n\t\t\t\t#include <clipping_planes_fragment>\n\t\t\t\tvec3 outgoingLight = vec3( 0.0 );\n\t\t\t\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t#include <color_fragment>\n\t\t\t\toutgoingLight = diffuseColor.rgb; // simple shader\n\t\t\t\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t#include <encodings_fragment>\n\t\t\t\t#include <fog_fragment>\n\t\t\t\t#include <premultiplied_alpha_fragment>\n\t\t\t}\n\t\t\t`,\n\n\t\t} );\n\n\t\tObject.defineProperties( this, {\n\n\t\t\topacity: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\treturn this.uniforms.opacity.value;\n\n\t\t\t\t},\n\n\t\t\t\tset: function ( value ) {\n\n\t\t\t\t\tthis.uniforms.opacity.value = value;\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcolor: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\treturn this.uniforms.diffuse.value;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.setValues( parameters );\n\t\tthis.isLDrawConditionalLineMaterial = true;\n\n\t}\n\n}\n\nclass ConditionalLineSegments extends LineSegments {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\t\tthis.isConditionalLine = true;\n\n\t}\n\n}\n\nfunction generateFaceNormals( faces ) {\n\n\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tconst face = faces[ i ];\n\t\tconst vertices = face.vertices;\n\t\tconst v0 = vertices[ 0 ];\n\t\tconst v1 = vertices[ 1 ];\n\t\tconst v2 = vertices[ 2 ];\n\n\t\t_tempVec0.subVectors( v1, v0 );\n\t\t_tempVec1.subVectors( v2, v1 );\n\t\tface.faceNormal = new Vector3()\n\t\t\t.crossVectors( _tempVec0, _tempVec1 )\n\t\t\t.normalize();\n\n\t}\n\n}\n\nconst _ray = new Ray();\nfunction smoothNormals( faces, lineSegments, checkSubSegments = false ) {\n\n\t// NOTE: 1e2 is pretty coarse but was chosen to quantize the resulting value because\n\t// it allows edges to be smoothed as expected (see minifig arms).\n\t// --\n\t// And the vector values are initialize multiplied by 1 + 1e-10 to account for floating\n\t// point errors on vertices along quantization boundaries. Ie after matrix multiplication\n\t// vertices that should be merged might be set to \"1.7\" and \"1.6999...\" meaning they won't\n\t// get merged. This added epsilon attempts to push these error values to the same quantized\n\t// value for the sake of hashing. See \"AT-ST mini\" dishes. See mrdoob/three#23169.\n\n\tconst hashMultiplier = ( 1 + 1e-10 ) * 1e2;\n\tfunction hashVertex( v ) {\n\n\t\tconst x = ~ ~ ( v.x * hashMultiplier );\n\t\tconst y = ~ ~ ( v.y * hashMultiplier );\n\t\tconst z = ~ ~ ( v.z * hashMultiplier );\n\n\t\treturn `${ x },${ y },${ z }`;\n\n\t}\n\n\tfunction hashEdge( v0, v1 ) {\n\n\t\treturn `${ hashVertex( v0 ) }_${ hashVertex( v1 ) }`;\n\n\t}\n\n\t// converts the two vertices to a ray with a normalized direction and origin of 0, 0, 0 projected\n\t// onto the original line.\n\tfunction toNormalizedRay( v0, v1, targetRay ) {\n\n\t\ttargetRay.direction.subVectors( v1, v0 ).normalize();\n\n\t\tconst scalar = v0.dot( targetRay.direction );\n\t\ttargetRay.origin.copy( v0 ).addScaledVector( targetRay.direction, - scalar );\n\n\t\treturn targetRay;\n\n\t}\n\n\tfunction hashRay( ray ) {\n\n\t\treturn hashEdge( ray.origin, ray.direction );\n\n\t}\n\n\tconst hardEdges = new Set();\n\tconst hardEdgeRays = new Map();\n\tconst halfEdgeList = {};\n\tconst normals = [];\n\n\t// Save the list of hard edges by hash\n\tfor ( let i = 0, l = lineSegments.length; i < l; i ++ ) {\n\n\t\tconst ls = lineSegments[ i ];\n\t\tconst vertices = ls.vertices;\n\t\tconst v0 = vertices[ 0 ];\n\t\tconst v1 = vertices[ 1 ];\n\t\thardEdges.add( hashEdge( v0, v1 ) );\n\t\thardEdges.add( hashEdge( v1, v0 ) );\n\n\t\t// only generate the hard edge ray map if we're checking subsegments because it's more expensive to check\n\t\t// and requires more memory.\n\t\tif ( checkSubSegments ) {\n\n\t\t\t// add both ray directions to the map\n\t\t\tconst ray = toNormalizedRay( v0, v1, new Ray() );\n\t\t\tconst rh1 = hashRay( ray );\n\t\t\tif ( ! hardEdgeRays.has( rh1 ) ) {\n\n\t\t\t\ttoNormalizedRay( v1, v0, ray );\n\t\t\t\tconst rh2 = hashRay( ray );\n\n\t\t\t\tconst info = {\n\t\t\t\t\tray,\n\t\t\t\t\tdistances: [],\n\t\t\t\t};\n\n\t\t\t\thardEdgeRays.set( rh1, info );\n\t\t\t\thardEdgeRays.set( rh2, info );\n\n\t\t\t}\n\n\t\t\t// store both segments ends in min, max order in the distances array to check if a face edge is a\n\t\t\t// subsegment later.\n\t\t\tconst info = hardEdgeRays.get( rh1 );\n\t\t\tlet d0 = info.ray.direction.dot( v0 );\n\t\t\tlet d1 = info.ray.direction.dot( v1 );\n\t\t\tif ( d0 > d1 ) {\n\n\t\t\t\t[ d0, d1 ] = [ d1, d0 ];\n\n\t\t\t}\n\n\t\t\tinfo.distances.push( d0, d1 );\n\n\t\t}\n\n\t}\n\n\t// track the half edges associated with each triangle\n\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tconst tri = faces[ i ];\n\t\tconst vertices = tri.vertices;\n\t\tconst vertCount = vertices.length;\n\t\tfor ( let i2 = 0; i2 < vertCount; i2 ++ ) {\n\n\t\t\tconst index = i2;\n\t\t\tconst next = ( i2 + 1 ) % vertCount;\n\t\t\tconst v0 = vertices[ index ];\n\t\t\tconst v1 = vertices[ next ];\n\t\t\tconst hash = hashEdge( v0, v1 );\n\n\t\t\t// don't add the triangle if the edge is supposed to be hard\n\t\t\tif ( hardEdges.has( hash ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// if checking subsegments then check to see if this edge lies on a hard edge ray and whether its within any ray bounds\n\t\t\tif ( checkSubSegments ) {\n\n\t\t\t\ttoNormalizedRay( v0, v1, _ray );\n\n\t\t\t\tconst rayHash = hashRay( _ray );\n\t\t\t\tif ( hardEdgeRays.has( rayHash ) ) {\n\n\t\t\t\t\tconst info = hardEdgeRays.get( rayHash );\n\t\t\t\t\tconst { ray, distances } = info;\n\t\t\t\t\tlet d0 = ray.direction.dot( v0 );\n\t\t\t\t\tlet d1 = ray.direction.dot( v1 );\n\n\t\t\t\t\tif ( d0 > d1 ) {\n\n\t\t\t\t\t\t[ d0, d1 ] = [ d1, d0 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// return early if the face edge is found to be a subsegment of a line edge meaning the edge will have \"hard\" normals\n\t\t\t\t\tlet found = false;\n\t\t\t\t\tfor ( let i = 0, l = distances.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\tif ( d0 >= distances[ i ] && d1 <= distances[ i + 1 ] ) {\n\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( found ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst info = {\n\t\t\t\tindex: index,\n\t\t\t\ttri: tri\n\t\t\t};\n\t\t\thalfEdgeList[ hash ] = info;\n\n\t\t}\n\n\t}\n\n\t// Iterate until we've tried to connect all faces to share normals\n\twhile ( true ) {\n\n\t\t// Stop if there are no more faces left\n\t\tlet halfEdge = null;\n\t\tfor ( const key in halfEdgeList ) {\n\n\t\t\thalfEdge = halfEdgeList[ key ];\n\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( halfEdge === null ) {\n\n\t\t\tbreak;\n\n\t\t}\n\n\t\t// Exhaustively find all connected faces\n\t\tconst queue = [ halfEdge ];\n\t\twhile ( queue.length > 0 ) {\n\n\t\t\t// initialize all vertex normals in this triangle\n\t\t\tconst tri = queue.pop().tri;\n\t\t\tconst vertices = tri.vertices;\n\t\t\tconst vertNormals = tri.normals;\n\t\t\tconst faceNormal = tri.faceNormal;\n\n\t\t\t// Check if any edge is connected to another triangle edge\n\t\t\tconst vertCount = vertices.length;\n\t\t\tfor ( let i2 = 0; i2 < vertCount; i2 ++ ) {\n\n\t\t\t\tconst index = i2;\n\t\t\t\tconst next = ( i2 + 1 ) % vertCount;\n\t\t\t\tconst v0 = vertices[ index ];\n\t\t\t\tconst v1 = vertices[ next ];\n\n\t\t\t\t// delete this triangle from the list so it won't be found again\n\t\t\t\tconst hash = hashEdge( v0, v1 );\n\t\t\t\tdelete halfEdgeList[ hash ];\n\n\t\t\t\tconst reverseHash = hashEdge( v1, v0 );\n\t\t\t\tconst otherInfo = halfEdgeList[ reverseHash ];\n\t\t\t\tif ( otherInfo ) {\n\n\t\t\t\t\tconst otherTri = otherInfo.tri;\n\t\t\t\t\tconst otherIndex = otherInfo.index;\n\t\t\t\t\tconst otherNormals = otherTri.normals;\n\t\t\t\t\tconst otherVertCount = otherNormals.length;\n\t\t\t\t\tconst otherFaceNormal = otherTri.faceNormal;\n\n\t\t\t\t\t// NOTE: If the angle between faces is > 67.5 degrees then assume it's\n\t\t\t\t\t// hard edge. There are some cases where the line segments do not line up exactly\n\t\t\t\t\t// with or span multiple triangle edges (see Lunar Vehicle wheels).\n\t\t\t\t\tif ( Math.abs( otherTri.faceNormal.dot( tri.faceNormal ) ) < 0.25 ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// if this triangle has already been traversed then it won't be in\n\t\t\t\t\t// the halfEdgeList. If it has not then add it to the queue and delete\n\t\t\t\t\t// it so it won't be found again.\n\t\t\t\t\tif ( reverseHash in halfEdgeList ) {\n\n\t\t\t\t\t\tqueue.push( otherInfo );\n\t\t\t\t\t\tdelete halfEdgeList[ reverseHash ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// share the first normal\n\t\t\t\t\tconst otherNext = ( otherIndex + 1 ) % otherVertCount;\n\t\t\t\t\tif (\n\t\t\t\t\t\tvertNormals[ index ] && otherNormals[ otherNext ] &&\n\t\t\t\t\t\tvertNormals[ index ] !== otherNormals[ otherNext ]\n\t\t\t\t\t) {\n\n\t\t\t\t\t\totherNormals[ otherNext ].norm.add( vertNormals[ index ].norm );\n\t\t\t\t\t\tvertNormals[ index ].norm = otherNormals[ otherNext ].norm;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet sharedNormal1 = vertNormals[ index ] || otherNormals[ otherNext ];\n\t\t\t\t\tif ( sharedNormal1 === null ) {\n\n\t\t\t\t\t\t// it's possible to encounter an edge of a triangle that has already been traversed meaning\n\t\t\t\t\t\t// both edges already have different normals defined and shared. To work around this we create\n\t\t\t\t\t\t// a wrapper object so when those edges are merged the normals can be updated everywhere.\n\t\t\t\t\t\tsharedNormal1 = { norm: new Vector3() };\n\t\t\t\t\t\tnormals.push( sharedNormal1.norm );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( vertNormals[ index ] === null ) {\n\n\t\t\t\t\t\tvertNormals[ index ] = sharedNormal1;\n\t\t\t\t\t\tsharedNormal1.norm.add( faceNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( otherNormals[ otherNext ] === null ) {\n\n\t\t\t\t\t\totherNormals[ otherNext ] = sharedNormal1;\n\t\t\t\t\t\tsharedNormal1.norm.add( otherFaceNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// share the second normal\n\t\t\t\t\tif (\n\t\t\t\t\t\tvertNormals[ next ] && otherNormals[ otherIndex ] &&\n\t\t\t\t\t\tvertNormals[ next ] !== otherNormals[ otherIndex ]\n\t\t\t\t\t) {\n\n\t\t\t\t\t\totherNormals[ otherIndex ].norm.add( vertNormals[ next ].norm );\n\t\t\t\t\t\tvertNormals[ next ].norm = otherNormals[ otherIndex ].norm;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet sharedNormal2 = vertNormals[ next ] || otherNormals[ otherIndex ];\n\t\t\t\t\tif ( sharedNormal2 === null ) {\n\n\t\t\t\t\t\tsharedNormal2 = { norm: new Vector3() };\n\t\t\t\t\t\tnormals.push( sharedNormal2.norm );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( vertNormals[ next ] === null ) {\n\n\t\t\t\t\t\tvertNormals[ next ] = sharedNormal2;\n\t\t\t\t\t\tsharedNormal2.norm.add( faceNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( otherNormals[ otherIndex ] === null ) {\n\n\t\t\t\t\t\totherNormals[ otherIndex ] = sharedNormal2;\n\t\t\t\t\t\tsharedNormal2.norm.add( otherFaceNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// The normals of each face have been added up so now we average them by normalizing the vector.\n\tfor ( let i = 0, l = normals.length; i < l; i ++ ) {\n\n\t\tnormals[ i ].normalize();\n\n\t}\n\n}\n\nfunction isPartType( type ) {\n\n\treturn type === 'Part' || type === 'Unofficial_Part';\n\n}\n\nfunction isPrimitiveType( type ) {\n\n\treturn /primitive/i.test( type ) || type === 'Subpart';\n\n}\n\nclass LineParser {\n\n\tconstructor( line, lineNumber ) {\n\n\t\tthis.line = line;\n\t\tthis.lineLength = line.length;\n\t\tthis.currentCharIndex = 0;\n\t\tthis.currentChar = ' ';\n\t\tthis.lineNumber = lineNumber;\n\n\t}\n\n\tseekNonSpace() {\n\n\t\twhile ( this.currentCharIndex < this.lineLength ) {\n\n\t\t\tthis.currentChar = this.line.charAt( this.currentCharIndex );\n\n\t\t\tif ( this.currentChar !== ' ' && this.currentChar !== '\\t' ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.currentCharIndex ++;\n\n\t\t}\n\n\t}\n\n\tgetToken() {\n\n\t\tconst pos0 = this.currentCharIndex ++;\n\n\t\t// Seek space\n\t\twhile ( this.currentCharIndex < this.lineLength ) {\n\n\t\t\tthis.currentChar = this.line.charAt( this.currentCharIndex );\n\n\t\t\tif ( this.currentChar === ' ' || this.currentChar === '\\t' ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tthis.currentCharIndex ++;\n\n\t\t}\n\n\t\tconst pos1 = this.currentCharIndex;\n\n\t\tthis.seekNonSpace();\n\n\t\treturn this.line.substring( pos0, pos1 );\n\n\t}\n\n\tgetVector() {\n\n\t\treturn new Vector3( parseFloat( this.getToken() ), parseFloat( this.getToken() ), parseFloat( this.getToken() ) );\n\n\t}\n\n\tgetRemainingString() {\n\n\t\treturn this.line.substring( this.currentCharIndex, this.lineLength );\n\n\t}\n\n\tisAtTheEnd() {\n\n\t\treturn this.currentCharIndex >= this.lineLength;\n\n\t}\n\n\tsetToEnd() {\n\n\t\tthis.currentCharIndex = this.lineLength;\n\n\t}\n\n\tgetLineNumberString() {\n\n\t\treturn this.lineNumber >= 0 ? ' at line ' + this.lineNumber : '';\n\n\t}\n\n}\n\n// Fetches and parses an intermediate representation of LDraw parts files.\nclass LDrawParsedCache {\n\n\tconstructor( loader ) {\n\n\t\tthis.loader = loader;\n\t\tthis._cache = {};\n\n\t}\n\n\tcloneResult( original ) {\n\n\t\tconst result = {};\n\n\t\t// vertices are transformed and normals computed before being converted to geometry\n\t\t// so these pieces must be cloned.\n\t\tresult.faces = original.faces.map( face => {\n\n\t\t\treturn {\n\t\t\t\tcolorCode: face.colorCode,\n\t\t\t\tmaterial: face.material,\n\t\t\t\tvertices: face.vertices.map( v => v.clone() ),\n\t\t\t\tnormals: face.normals.map( () => null ),\n\t\t\t\tfaceNormal: null\n\t\t\t};\n\n\t\t} );\n\n\t\tresult.conditionalSegments = original.conditionalSegments.map( face => {\n\n\t\t\treturn {\n\t\t\t\tcolorCode: face.colorCode,\n\t\t\t\tmaterial: face.material,\n\t\t\t\tvertices: face.vertices.map( v => v.clone() ),\n\t\t\t\tcontrolPoints: face.controlPoints.map( v => v.clone() )\n\t\t\t};\n\n\t\t} );\n\n\t\tresult.lineSegments = original.lineSegments.map( face => {\n\n\t\t\treturn {\n\t\t\t\tcolorCode: face.colorCode,\n\t\t\t\tmaterial: face.material,\n\t\t\t\tvertices: face.vertices.map( v => v.clone() )\n\t\t\t};\n\n\t\t} );\n\n\t\t// none if this is subsequently modified\n\t\tresult.type = original.type;\n\t\tresult.category = original.category;\n\t\tresult.keywords = original.keywords;\n\t\tresult.subobjects = original.subobjects;\n\t\tresult.totalFaces = original.totalFaces;\n\t\tresult.startingConstructionStep = original.startingConstructionStep;\n\t\tresult.materials = original.materials;\n\t\tresult.group = null;\n\t\treturn result;\n\n\t}\n\n\tasync fetchData( fileName ) {\n\n\t\tlet triedLowerCase = false;\n\t\tlet locationState = FILE_LOCATION_AS_IS;\n\t\twhile ( locationState !== FILE_LOCATION_NOT_FOUND ) {\n\n\t\t\tlet subobjectURL = fileName;\n\t\t\tswitch ( locationState ) {\n\n\t\t\t\tcase FILE_LOCATION_AS_IS:\n\t\t\t\t\tlocationState = locationState + 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILE_LOCATION_TRY_PARTS:\n\t\t\t\t\tsubobjectURL = 'parts/' + subobjectURL;\n\t\t\t\t\tlocationState = locationState + 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILE_LOCATION_TRY_P:\n\t\t\t\t\tsubobjectURL = 'p/' + subobjectURL;\n\t\t\t\t\tlocationState = locationState + 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILE_LOCATION_TRY_MODELS:\n\t\t\t\t\tsubobjectURL = 'models/' + subobjectURL;\n\t\t\t\t\tlocationState = locationState + 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILE_LOCATION_TRY_RELATIVE:\n\t\t\t\t\tsubobjectURL = fileName.substring( 0, fileName.lastIndexOf( '/' ) + 1 ) + subobjectURL;\n\t\t\t\t\tlocationState = locationState + 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILE_LOCATION_TRY_ABSOLUTE:\n\n\t\t\t\t\tif ( triedLowerCase ) {\n\n\t\t\t\t\t\t// Try absolute path\n\t\t\t\t\t\tlocationState = FILE_LOCATION_NOT_FOUND;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Next attempt is lower case\n\t\t\t\t\t\tfileName = fileName.toLowerCase();\n\t\t\t\t\t\tsubobjectURL = fileName;\n\t\t\t\t\t\ttriedLowerCase = true;\n\t\t\t\t\t\tlocationState = FILE_LOCATION_AS_IS;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tconst loader = this.loader;\n\t\t\tconst fileLoader = new FileLoader( loader.manager );\n\t\t\tfileLoader.setPath( loader.partsLibraryPath );\n\t\t\tfileLoader.setRequestHeader( loader.requestHeader );\n\t\t\tfileLoader.setWithCredentials( loader.withCredentials );\n\n\t\t\ttry {\n\n\t\t\t\tconst text = await fileLoader.loadAsync( subobjectURL );\n\t\t\t\treturn text;\n\n\t\t\t} catch {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthrow new Error( 'LDrawLoader: Subobject \"' + fileName + '\" could not be loaded.' );\n\n\t}\n\n\tparse( text, fileName = null ) {\n\n\t\tconst loader = this.loader;\n\n\t\t// final results\n\t\tconst faces = [];\n\t\tconst lineSegments = [];\n\t\tconst conditionalSegments = [];\n\t\tconst subobjects = [];\n\t\tconst materials = {};\n\n\t\tconst getLocalMaterial = colorCode => {\n\n\t\t\treturn materials[ colorCode ] || null;\n\n\t\t};\n\n\t\tlet type = 'Model';\n\t\tlet category = null;\n\t\tlet keywords = null;\n\t\tlet totalFaces = 0;\n\n\t\t// split into lines\n\t\tif ( text.indexOf( '\\r\\n' ) !== - 1 ) {\n\n\t\t\t// This is faster than String.split with regex that splits on both\n\t\t\ttext = text.replace( /\\r\\n/g, '\\n' );\n\n\t\t}\n\n\t\tconst lines = text.split( '\\n' );\n\t\tconst numLines = lines.length;\n\n\t\tlet parsingEmbeddedFiles = false;\n\t\tlet currentEmbeddedFileName = null;\n\t\tlet currentEmbeddedText = null;\n\n\t\tlet bfcCertified = false;\n\t\tlet bfcCCW = true;\n\t\tlet bfcInverted = false;\n\t\tlet bfcCull = true;\n\n\t\tlet startingConstructionStep = false;\n\n\t\t// Parse all line commands\n\t\tfor ( let lineIndex = 0; lineIndex < numLines; lineIndex ++ ) {\n\n\t\t\tconst line = lines[ lineIndex ];\n\n\t\t\tif ( line.length === 0 ) continue;\n\n\t\t\tif ( parsingEmbeddedFiles ) {\n\n\t\t\t\tif ( line.startsWith( '0 FILE ' ) ) {\n\n\t\t\t\t\t// Save previous embedded file in the cache\n\t\t\t\t\tthis.setData( currentEmbeddedFileName, currentEmbeddedText );\n\n\t\t\t\t\t// New embedded text file\n\t\t\t\t\tcurrentEmbeddedFileName = line.substring( 7 );\n\t\t\t\t\tcurrentEmbeddedText = '';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcurrentEmbeddedText += line + '\\n';\n\n\t\t\t\t}\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst lp = new LineParser( line, lineIndex + 1 );\n\t\t\tlp.seekNonSpace();\n\n\t\t\tif ( lp.isAtTheEnd() ) {\n\n\t\t\t\t// Empty line\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// Parse the line type\n\t\t\tconst lineType = lp.getToken();\n\n\t\t\tlet material;\n\t\t\tlet colorCode;\n\t\t\tlet segment;\n\t\t\tlet ccw;\n\t\t\tlet doubleSided;\n\t\t\tlet v0, v1, v2, v3, c0, c1;\n\n\t\t\tswitch ( lineType ) {\n\n\t\t\t\t// Line type 0: Comment or META\n\t\t\t\tcase '0':\n\n\t\t\t\t\t// Parse meta directive\n\t\t\t\t\tconst meta = lp.getToken();\n\n\t\t\t\t\tif ( meta ) {\n\n\t\t\t\t\t\tswitch ( meta ) {\n\n\t\t\t\t\t\t\tcase '!LDRAW_ORG':\n\n\t\t\t\t\t\t\t\ttype = lp.getToken();\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase '!COLOUR':\n\n\t\t\t\t\t\t\t\tmaterial = loader.parseColorMetaDirective( lp );\n\t\t\t\t\t\t\t\tif ( material ) {\n\n\t\t\t\t\t\t\t\t\tmaterials[ material.userData.code ] = material;\n\n\t\t\t\t\t\t\t\t}\telse {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'LDrawLoader: Error parsing material' + lp.getLineNumberString() );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase '!CATEGORY':\n\n\t\t\t\t\t\t\t\tcategory = lp.getToken();\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase '!KEYWORDS':\n\n\t\t\t\t\t\t\t\tconst newKeywords = lp.getRemainingString().split( ',' );\n\t\t\t\t\t\t\t\tif ( newKeywords.length > 0 ) {\n\n\t\t\t\t\t\t\t\t\tif ( ! keywords ) {\n\n\t\t\t\t\t\t\t\t\t\tkeywords = [];\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tnewKeywords.forEach( function ( keyword ) {\n\n\t\t\t\t\t\t\t\t\t\tkeywords.push( keyword.trim() );\n\n\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'FILE':\n\n\t\t\t\t\t\t\t\tif ( lineIndex > 0 ) {\n\n\t\t\t\t\t\t\t\t\t// Start embedded text files parsing\n\t\t\t\t\t\t\t\t\tparsingEmbeddedFiles = true;\n\t\t\t\t\t\t\t\t\tcurrentEmbeddedFileName = lp.getRemainingString();\n\t\t\t\t\t\t\t\t\tcurrentEmbeddedText = '';\n\n\t\t\t\t\t\t\t\t\tbfcCertified = false;\n\t\t\t\t\t\t\t\t\tbfcCCW = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'BFC':\n\n\t\t\t\t\t\t\t\t// Changes to the backface culling state\n\t\t\t\t\t\t\t\twhile ( ! lp.isAtTheEnd() ) {\n\n\t\t\t\t\t\t\t\t\tconst token = lp.getToken();\n\n\t\t\t\t\t\t\t\t\tswitch ( token ) {\n\n\t\t\t\t\t\t\t\t\t\tcase 'CERTIFY':\n\t\t\t\t\t\t\t\t\t\tcase 'NOCERTIFY':\n\n\t\t\t\t\t\t\t\t\t\t\tbfcCertified = token === 'CERTIFY';\n\t\t\t\t\t\t\t\t\t\t\tbfcCCW = true;\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'CW':\n\t\t\t\t\t\t\t\t\t\tcase 'CCW':\n\n\t\t\t\t\t\t\t\t\t\t\tbfcCCW = token === 'CCW';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'INVERTNEXT':\n\n\t\t\t\t\t\t\t\t\t\t\tbfcInverted = true;\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'CLIP':\n\t\t\t\t\t\t\t\t\t\tcase 'NOCLIP':\n\n\t\t\t\t\t\t\t\t\t\t\tbfcCull = token === 'CLIP';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.' );\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'STEP':\n\n\t\t\t\t\t\t\t\tstartingConstructionStep = true;\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// Other meta directives are not implemented\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// Line type 1: Sub-object file\n\t\t\t\tcase '1':\n\n\t\t\t\t\tcolorCode = lp.getToken();\n\t\t\t\t\tmaterial = getLocalMaterial( colorCode );\n\n\t\t\t\t\tconst posX = parseFloat( lp.getToken() );\n\t\t\t\t\tconst posY = parseFloat( lp.getToken() );\n\t\t\t\t\tconst posZ = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m0 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m1 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m2 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m3 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m4 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m5 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m6 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m7 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m8 = parseFloat( lp.getToken() );\n\n\t\t\t\t\tconst matrix = new Matrix4().set(\n\t\t\t\t\t\tm0, m1, m2, posX,\n\t\t\t\t\t\tm3, m4, m5, posY,\n\t\t\t\t\t\tm6, m7, m8, posZ,\n\t\t\t\t\t\t0, 0, 0, 1\n\t\t\t\t\t);\n\n\t\t\t\t\tlet fileName = lp.getRemainingString().trim().replace( /\\\\/g, '/' );\n\n\t\t\t\t\tif ( loader.fileMap[ fileName ] ) {\n\n\t\t\t\t\t\t// Found the subobject path in the preloaded file path map\n\t\t\t\t\t\tfileName = loader.fileMap[ fileName ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Standardized subfolders\n\t\t\t\t\t\tif ( fileName.startsWith( 's/' ) ) {\n\n\t\t\t\t\t\t\tfileName = 'parts/' + fileName;\n\n\t\t\t\t\t\t} else if ( fileName.startsWith( '48/' ) ) {\n\n\t\t\t\t\t\t\tfileName = 'p/' + fileName;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tsubobjects.push( {\n\t\t\t\t\t\tmaterial: material,\n\t\t\t\t\t\tcolorCode: colorCode,\n\t\t\t\t\t\tmatrix: matrix,\n\t\t\t\t\t\tfileName: fileName,\n\t\t\t\t\t\tinverted: bfcInverted,\n\t\t\t\t\t\tstartingConstructionStep: startingConstructionStep\n\t\t\t\t\t} );\n\n\t\t\t\t\tbfcInverted = false;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// Line type 2: Line segment\n\t\t\t\tcase '2':\n\n\t\t\t\t\tcolorCode = lp.getToken();\n\t\t\t\t\tmaterial = getLocalMaterial( colorCode );\n\t\t\t\t\tv0 = lp.getVector();\n\t\t\t\t\tv1 = lp.getVector();\n\n\t\t\t\t\tsegment = {\n\t\t\t\t\t\tmaterial: material,\n\t\t\t\t\t\tcolorCode: colorCode,\n\t\t\t\t\t\tvertices: [ v0, v1 ],\n\t\t\t\t\t};\n\n\t\t\t\t\tlineSegments.push( segment );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// Line type 5: Conditional Line segment\n\t\t\t\tcase '5':\n\n\t\t\t\t\tcolorCode = lp.getToken();\n\t\t\t\t\tmaterial = getLocalMaterial( colorCode );\n\t\t\t\t\tv0 = lp.getVector();\n\t\t\t\t\tv1 = lp.getVector();\n\t\t\t\t\tc0 = lp.getVector();\n\t\t\t\t\tc1 = lp.getVector();\n\n\t\t\t\t\tsegment = {\n\t\t\t\t\t\tmaterial: material,\n\t\t\t\t\t\tcolorCode: colorCode,\n\t\t\t\t\t\tvertices: [ v0, v1 ],\n\t\t\t\t\t\tcontrolPoints: [ c0, c1 ],\n\t\t\t\t\t};\n\n\t\t\t\t\tconditionalSegments.push( segment );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// Line type 3: Triangle\n\t\t\t\tcase '3':\n\n\t\t\t\t\tcolorCode = lp.getToken();\n\t\t\t\t\tmaterial = getLocalMaterial( colorCode );\n\t\t\t\t\tccw = bfcCCW;\n\t\t\t\t\tdoubleSided = ! bfcCertified || ! bfcCull;\n\n\t\t\t\t\tif ( ccw === true ) {\n\n\t\t\t\t\t\tv0 = lp.getVector();\n\t\t\t\t\t\tv1 = lp.getVector();\n\t\t\t\t\t\tv2 = lp.getVector();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv2 = lp.getVector();\n\t\t\t\t\t\tv1 = lp.getVector();\n\t\t\t\t\t\tv0 = lp.getVector();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaces.push( {\n\t\t\t\t\t\tmaterial: material,\n\t\t\t\t\t\tcolorCode: colorCode,\n\t\t\t\t\t\tfaceNormal: null,\n\t\t\t\t\t\tvertices: [ v0, v1, v2 ],\n\t\t\t\t\t\tnormals: [ null, null, null ],\n\t\t\t\t\t} );\n\t\t\t\t\ttotalFaces ++;\n\n\t\t\t\t\tif ( doubleSided === true ) {\n\n\t\t\t\t\t\tfaces.push( {\n\t\t\t\t\t\t\tmaterial: material,\n\t\t\t\t\t\t\tcolorCode: colorCode,\n\t\t\t\t\t\t\tfaceNormal: null,\n\t\t\t\t\t\t\tvertices: [ v2, v1, v0 ],\n\t\t\t\t\t\t\tnormals: [ null, null, null ],\n\t\t\t\t\t\t} );\n\t\t\t\t\t\ttotalFaces ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// Line type 4: Quadrilateral\n\t\t\t\tcase '4':\n\n\t\t\t\t\tcolorCode = lp.getToken();\n\t\t\t\t\tmaterial = getLocalMaterial( colorCode );\n\t\t\t\t\tccw = bfcCCW;\n\t\t\t\t\tdoubleSided = ! bfcCertified || ! bfcCull;\n\n\t\t\t\t\tif ( ccw === true ) {\n\n\t\t\t\t\t\tv0 = lp.getVector();\n\t\t\t\t\t\tv1 = lp.getVector();\n\t\t\t\t\t\tv2 = lp.getVector();\n\t\t\t\t\t\tv3 = lp.getVector();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv3 = lp.getVector();\n\t\t\t\t\t\tv2 = lp.getVector();\n\t\t\t\t\t\tv1 = lp.getVector();\n\t\t\t\t\t\tv0 = lp.getVector();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// specifically place the triangle diagonal in the v0 and v1 slots so we can\n\t\t\t\t\t// account for the doubling of vertices later when smoothing normals.\n\t\t\t\t\tfaces.push( {\n\t\t\t\t\t\tmaterial: material,\n\t\t\t\t\t\tcolorCode: colorCode,\n\t\t\t\t\t\tfaceNormal: null,\n\t\t\t\t\t\tvertices: [ v0, v1, v2, v3 ],\n\t\t\t\t\t\tnormals: [ null, null, null, null ],\n\t\t\t\t\t} );\n\t\t\t\t\ttotalFaces += 2;\n\n\t\t\t\t\tif ( doubleSided === true ) {\n\n\t\t\t\t\t\tfaces.push( {\n\t\t\t\t\t\t\tmaterial: material,\n\t\t\t\t\t\t\tcolorCode: colorCode,\n\t\t\t\t\t\t\tfaceNormal: null,\n\t\t\t\t\t\t\tvertices: [ v3, v2, v1, v0 ],\n\t\t\t\t\t\t\tnormals: [ null, null, null, null ],\n\t\t\t\t\t\t} );\n\t\t\t\t\t\ttotalFaces += 2;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + '.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parsingEmbeddedFiles ) {\n\n\t\t\tthis.setData( currentEmbeddedFileName, currentEmbeddedText );\n\n\t\t}\n\n\t\treturn {\n\t\t\tfaces,\n\t\t\tconditionalSegments,\n\t\t\tlineSegments,\n\t\t\ttype,\n\t\t\tcategory,\n\t\t\tkeywords,\n\t\t\tsubobjects,\n\t\t\ttotalFaces,\n\t\t\tstartingConstructionStep,\n\t\t\tmaterials,\n\t\t\tfileName,\n\t\t\tgroup: null\n\t\t};\n\n\t}\n\n\t// returns an (optionally cloned) instance of the data\n\tgetData( fileName, clone = true ) {\n\n\t\tconst key = fileName.toLowerCase();\n\t\tconst result = this._cache[ key ];\n\t\tif ( result === null || result instanceof Promise ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( clone ) {\n\n\t\t\treturn this.cloneResult( result );\n\n\t\t} else {\n\n\t\t\treturn result;\n\n\t\t}\n\n\t}\n\n\t// kicks off a fetch and parse of the requested data if it hasn't already been loaded. Returns when\n\t// the data is ready to use and can be retrieved synchronously with \"getData\".\n\tasync ensureDataLoaded( fileName ) {\n\n\t\tconst key = fileName.toLowerCase();\n\t\tif ( ! ( key in this._cache ) ) {\n\n\t\t\t// replace the promise with a copy of the parsed data for immediate processing\n\t\t\tthis._cache[ key ] = this.fetchData( fileName ).then( text => {\n\n\t\t\t\tconst info = this.parse( text, fileName );\n\t\t\t\tthis._cache[ key ] = info;\n\t\t\t\treturn info;\n\n\t\t\t} );\n\n\t\t}\n\n\t\tawait this._cache[ key ];\n\n\t}\n\n\t// sets the data in the cache from parsed data\n\tsetData( fileName, text ) {\n\n\t\tconst key = fileName.toLowerCase();\n\t\tthis._cache[ key ] = this.parse( text, fileName );\n\n\t}\n\n}\n\n// returns the material for an associated color code. If the color code is 16 for a face or 24 for\n// an edge then the passthroughColorCode is used.\nfunction getMaterialFromCode( colorCode, parentColorCode, materialHierarchy, forEdge ) {\n\n\tconst isPassthrough = ! forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\tif ( isPassthrough ) {\n\n\t\tcolorCode = parentColorCode;\n\n\t}\n\n\treturn materialHierarchy[ colorCode ] || null;\n\n}\n\n// Class used to parse and build LDraw parts as three.js objects and cache them if they're a \"Part\" type.\nclass LDrawPartsGeometryCache {\n\n\tconstructor( loader ) {\n\n\t\tthis.loader = loader;\n\t\tthis.parseCache = new LDrawParsedCache( loader );\n\t\tthis._cache = {};\n\n\t}\n\n\t// Convert the given file information into a mesh by processing subobjects.\n\tasync processIntoMesh( info ) {\n\n\t\tconst loader = this.loader;\n\t\tconst parseCache = this.parseCache;\n\t\tconst faceMaterials = new Set();\n\n\t\t// Processes the part subobject information to load child parts and merge geometry onto part\n\t\t// piece object.\n\t\tconst processInfoSubobjects = async ( info, subobject = null ) => {\n\n\t\t\tconst subobjects = info.subobjects;\n\t\t\tconst promises = [];\n\n\t\t\t// Trigger load of all subobjects. If a subobject isn't a primitive then load it as a separate\n\t\t\t// group which lets instruction steps apply correctly.\n\t\t\tfor ( let i = 0, l = subobjects.length; i < l; i ++ ) {\n\n\t\t\t\tconst subobject = subobjects[ i ];\n\t\t\t\tconst promise = parseCache.ensureDataLoaded( subobject.fileName ).then( () => {\n\n\t\t\t\t\tconst subobjectInfo = parseCache.getData( subobject.fileName, false );\n\t\t\t\t\tif ( ! isPrimitiveType( subobjectInfo.type ) ) {\n\n\t\t\t\t\t\treturn this.loadModel( subobject.fileName ).catch( error => {\n\n\t\t\t\t\t\t\tconsole.warn( error );\n\t\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn processInfoSubobjects( parseCache.getData( subobject.fileName ), subobject );\n\n\t\t\t\t} );\n\n\t\t\t\tpromises.push( promise );\n\n\t\t\t}\n\n\t\t\tconst group = new Group();\n\t\t\tgroup.userData.category = info.category;\n\t\t\tgroup.userData.keywords = info.keywords;\n\t\t\tinfo.group = group;\n\n\t\t\tconst subobjectInfos = await Promise.all( promises );\n\t\t\tfor ( let i = 0, l = subobjectInfos.length; i < l; i ++ ) {\n\n\t\t\t\tconst subobject = info.subobjects[ i ];\n\t\t\t\tconst subobjectInfo = subobjectInfos[ i ];\n\n\t\t\t\tif ( subobjectInfo === null ) {\n\n\t\t\t\t\t// the subobject failed to load\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// if the subobject was loaded as a separate group then apply the parent scopes materials\n\t\t\t\tif ( subobjectInfo.isGroup ) {\n\n\t\t\t\t\tconst subobjectGroup = subobjectInfo;\n\t\t\t\t\tsubobject.matrix.decompose( subobjectGroup.position, subobjectGroup.quaternion, subobjectGroup.scale );\n\t\t\t\t\tsubobjectGroup.userData.startingConstructionStep = subobject.startingConstructionStep;\n\t\t\t\t\tsubobjectGroup.name = subobject.fileName;\n\n\t\t\t\t\tloader.applyMaterialsToMesh( subobjectGroup, subobject.colorCode, info.materials );\n\n\t\t\t\t\tgroup.add( subobjectGroup );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// add the subobject group if it has children in case it has both children and primitives\n\t\t\t\tif ( subobjectInfo.group.children.length ) {\n\n\t\t\t\t\tgroup.add( subobjectInfo.group );\n\n\t\t\t\t}\n\n\t\t\t\t// transform the primitives into the local space of the parent piece and append them to\n\t\t\t\t// to the parent primitives list.\n\t\t\t\tconst parentLineSegments = info.lineSegments;\n\t\t\t\tconst parentConditionalSegments = info.conditionalSegments;\n\t\t\t\tconst parentFaces = info.faces;\n\n\t\t\t\tconst lineSegments = subobjectInfo.lineSegments;\n\t\t\t\tconst conditionalSegments = subobjectInfo.conditionalSegments;\n\n\t\t\t\tconst faces = subobjectInfo.faces;\n\t\t\t\tconst matrix = subobject.matrix;\n\t\t\t\tconst inverted = subobject.inverted;\n\t\t\t\tconst matrixScaleInverted = matrix.determinant() < 0;\n\t\t\t\tconst colorCode = subobject.colorCode;\n\n\t\t\t\tconst lineColorCode = colorCode === MAIN_COLOUR_CODE ? MAIN_EDGE_COLOUR_CODE : colorCode;\n\t\t\t\tfor ( let i = 0, l = lineSegments.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst ls = lineSegments[ i ];\n\t\t\t\t\tconst vertices = ls.vertices;\n\t\t\t\t\tvertices[ 0 ].applyMatrix4( matrix );\n\t\t\t\t\tvertices[ 1 ].applyMatrix4( matrix );\n\t\t\t\t\tls.colorCode = ls.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : ls.colorCode;\n\t\t\t\t\tls.material = ls.material || getMaterialFromCode( ls.colorCode, ls.colorCode, info.materials, true );\n\n\t\t\t\t\tparentLineSegments.push( ls );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, l = conditionalSegments.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst os = conditionalSegments[ i ];\n\t\t\t\t\tconst vertices = os.vertices;\n\t\t\t\t\tconst controlPoints = os.controlPoints;\n\t\t\t\t\tvertices[ 0 ].applyMatrix4( matrix );\n\t\t\t\t\tvertices[ 1 ].applyMatrix4( matrix );\n\t\t\t\t\tcontrolPoints[ 0 ].applyMatrix4( matrix );\n\t\t\t\t\tcontrolPoints[ 1 ].applyMatrix4( matrix );\n\t\t\t\t\tos.colorCode = os.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : os.colorCode;\n\t\t\t\t\tos.material = os.material || getMaterialFromCode( os.colorCode, os.colorCode, info.materials, true );\n\n\t\t\t\t\tparentConditionalSegments.push( os );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst tri = faces[ i ];\n\t\t\t\t\tconst vertices = tri.vertices;\n\t\t\t\t\tfor ( let i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvertices[ i ].applyMatrix4( matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttri.colorCode = tri.colorCode === MAIN_COLOUR_CODE ? colorCode : tri.colorCode;\n\t\t\t\t\ttri.material = tri.material || getMaterialFromCode( tri.colorCode, colorCode, info.materials, false );\n\t\t\t\t\tfaceMaterials.add( tri.colorCode );\n\n\t\t\t\t\t// If the scale of the object is negated then the triangle winding order\n\t\t\t\t\t// needs to be flipped.\n\t\t\t\t\tif ( matrixScaleInverted !== inverted ) {\n\n\t\t\t\t\t\tvertices.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tparentFaces.push( tri );\n\n\t\t\t\t}\n\n\t\t\t\tinfo.totalFaces += subobjectInfo.totalFaces;\n\n\t\t\t}\n\n\t\t\t// Apply the parent subobjects pass through material code to this object. This is done several times due\n\t\t\t// to material scoping.\n\t\t\tif ( subobject ) {\n\n\t\t\t\tloader.applyMaterialsToMesh( group, subobject.colorCode, info.materials );\n\n\t\t\t}\n\n\t\t\treturn info;\n\n\t\t};\n\n\t\t// Track material use to see if we need to use the normal smooth slow path for hard edges.\n\t\tfor ( let i = 0, l = info.faces; i < l; i ++ ) {\n\n\t\t\tfaceMaterials.add( info.faces[ i ].colorCode );\n\n\t\t}\n\n\t\tawait processInfoSubobjects( info );\n\n\t\tif ( loader.smoothNormals ) {\n\n\t\t\tconst checkSubSegments = faceMaterials.size > 1;\n\t\t\tgenerateFaceNormals( info.faces );\n\t\t\tsmoothNormals( info.faces, info.lineSegments, checkSubSegments );\n\n\t\t}\n\n\t\t// Add the primitive objects and metadata.\n\t\tconst group = info.group;\n\t\tif ( info.faces.length > 0 ) {\n\n\t\t\tgroup.add( createObject( info.faces, 3, false, info.totalFaces ) );\n\n\t\t}\n\n\t\tif ( info.lineSegments.length > 0 ) {\n\n\t\t\tgroup.add( createObject( info.lineSegments, 2 ) );\n\n\t\t}\n\n\t\tif ( info.conditionalSegments.length > 0 ) {\n\n\t\t\tgroup.add( createObject( info.conditionalSegments, 2, true ) );\n\n\t\t}\n\n\t\treturn group;\n\n\t}\n\n\thasCachedModel( fileName ) {\n\n\t\treturn fileName !== null && fileName.toLowerCase() in this._cache;\n\n\t}\n\n\tasync getCachedModel( fileName ) {\n\n\t\tif ( fileName !== null && this.hasCachedModel( fileName ) ) {\n\n\t\t\tconst key = fileName.toLowerCase();\n\t\t\tconst group = await this._cache[ key ];\n\t\t\treturn group.clone();\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t}\n\n\t// Loads and parses the model with the given file name. Returns a cached copy if available.\n\tasync loadModel( fileName ) {\n\n\t\tconst parseCache = this.parseCache;\n\t\tconst key = fileName.toLowerCase();\n\t\tif ( this.hasCachedModel( fileName ) ) {\n\n\t\t\t// Return cached model if available.\n\t\t\treturn this.getCachedModel( fileName );\n\n\t\t} else {\n\n\t\t\t// Otherwise parse a new model.\n\t\t\t// Ensure the file data is loaded and pre parsed.\n\t\t\tawait parseCache.ensureDataLoaded( fileName );\n\n\t\t\tconst info = parseCache.getData( fileName );\n\t\t\tconst promise = this.processIntoMesh( info );\n\n\t\t\t// Now that the file has loaded it's possible that another part parse has been waiting in parallel\n\t\t\t// so check the cache again to see if it's been added since the last async operation so we don't\n\t\t\t// do unnecessary work.\n\t\t\tif ( this.hasCachedModel( fileName ) ) {\n\n\t\t\t\treturn this.getCachedModel( fileName );\n\n\t\t\t}\n\n\t\t\t// Cache object if it's a part so it can be reused later.\n\t\t\tif ( isPartType( info.type ) ) {\n\n\t\t\t\tthis._cache[ key ] = promise;\n\n\t\t\t}\n\n\t\t\t// return a copy\n\t\t\tconst group = await promise;\n\t\t\treturn group.clone();\n\n\t\t}\n\n\t}\n\n\t// parses the given model text into a renderable object. Returns cached copy if available.\n\tasync parseModel( text ) {\n\n\t\tconst parseCache = this.parseCache;\n\t\tconst info = parseCache.parse( text );\n\t\tif ( isPartType( info.type ) && this.hasCachedModel( info.fileName ) ) {\n\n\t\t\treturn this.getCachedModel( info.fileName );\n\n\t\t}\n\n\t\treturn this.processIntoMesh( info );\n\n\t}\n\n}\n\nfunction sortByMaterial( a, b ) {\n\n\tif ( a.colorCode === b.colorCode ) {\n\n\t\treturn 0;\n\n\t}\n\n\tif ( a.colorCode < b.colorCode ) {\n\n\t\treturn - 1;\n\n\t}\n\n\treturn 1;\n\n}\n\nfunction createObject( elements, elementSize, isConditionalSegments = false, totalElements = null ) {\n\n\t// Creates a LineSegments (elementSize = 2) or a Mesh (elementSize = 3 )\n\t// With per face / segment material, implemented with mesh groups and materials array\n\n\t// Sort the faces or line segments by color code to make later the mesh groups\n\telements.sort( sortByMaterial );\n\n\tif ( totalElements === null ) {\n\n\t\ttotalElements = elements.length;\n\n\t}\n\n\tconst positions = new Float32Array( elementSize * totalElements * 3 );\n\tconst normals = elementSize === 3 ? new Float32Array( elementSize * totalElements * 3 ) : null;\n\tconst materials = [];\n\n\tconst quadArray = new Array( 6 );\n\tconst bufferGeometry = new BufferGeometry();\n\tlet prevMaterial = null;\n\tlet index0 = 0;\n\tlet numGroupVerts = 0;\n\tlet offset = 0;\n\n\tfor ( let iElem = 0, nElem = elements.length; iElem < nElem; iElem ++ ) {\n\n\t\tconst elem = elements[ iElem ];\n\t\tlet vertices = elem.vertices;\n\t\tif ( vertices.length === 4 ) {\n\n\t\t\tquadArray[ 0 ] = vertices[ 0 ];\n\t\t\tquadArray[ 1 ] = vertices[ 1 ];\n\t\t\tquadArray[ 2 ] = vertices[ 2 ];\n\t\t\tquadArray[ 3 ] = vertices[ 0 ];\n\t\t\tquadArray[ 4 ] = vertices[ 2 ];\n\t\t\tquadArray[ 5 ] = vertices[ 3 ];\n\t\t\tvertices = quadArray;\n\n\t\t}\n\n\t\tfor ( let j = 0, l = vertices.length; j < l; j ++ ) {\n\n\t\t\tconst v = vertices[ j ];\n\t\t\tconst index = offset + j * 3;\n\t\t\tpositions[ index + 0 ] = v.x;\n\t\t\tpositions[ index + 1 ] = v.y;\n\t\t\tpositions[ index + 2 ] = v.z;\n\n\t\t}\n\n\t\t// create the normals array if this is a set of faces\n\t\tif ( elementSize === 3 ) {\n\n\t\t\tif ( ! elem.faceNormal ) {\n\n\t\t\t\tconst v0 = vertices[ 0 ];\n\t\t\t\tconst v1 = vertices[ 1 ];\n\t\t\t\tconst v2 = vertices[ 2 ];\n\t\t\t\t_tempVec0.subVectors( v1, v0 );\n\t\t\t\t_tempVec1.subVectors( v2, v1 );\n\t\t\t\telem.faceNormal = new Vector3()\n\t\t\t\t\t.crossVectors( _tempVec0, _tempVec1 )\n\t\t\t\t\t.normalize();\n\n\t\t\t}\n\n\t\t\tlet elemNormals = elem.normals;\n\t\t\tif ( elemNormals.length === 4 ) {\n\n\t\t\t\tquadArray[ 0 ] = elemNormals[ 0 ];\n\t\t\t\tquadArray[ 1 ] = elemNormals[ 1 ];\n\t\t\t\tquadArray[ 2 ] = elemNormals[ 2 ];\n\t\t\t\tquadArray[ 3 ] = elemNormals[ 0 ];\n\t\t\t\tquadArray[ 4 ] = elemNormals[ 2 ];\n\t\t\t\tquadArray[ 5 ] = elemNormals[ 3 ];\n\t\t\t\telemNormals = quadArray;\n\n\t\t\t}\n\n\t\t\tfor ( let j = 0, l = elemNormals.length; j < l; j ++ ) {\n\n\t\t\t\t// use face normal if a vertex normal is not provided\n\t\t\t\tlet n = elem.faceNormal;\n\t\t\t\tif ( elemNormals[ j ] ) {\n\n\t\t\t\t\tn = elemNormals[ j ].norm;\n\n\t\t\t\t}\n\n\t\t\t\tconst index = offset + j * 3;\n\t\t\t\tnormals[ index + 0 ] = n.x;\n\t\t\t\tnormals[ index + 1 ] = n.y;\n\t\t\t\tnormals[ index + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( prevMaterial !== elem.colorCode ) {\n\n\t\t\tif ( prevMaterial !== null ) {\n\n\t\t\t\tbufferGeometry.addGroup( index0, numGroupVerts, materials.length - 1 );\n\n\t\t\t}\n\n\t\t\tconst material = elem.material;\n\n\t\t\tif ( material !== null ) {\n\n\t\t\t\tif ( elementSize === 3 ) {\n\n\t\t\t\t\tmaterials.push( material );\n\n\t\t\t\t} else if ( elementSize === 2 ) {\n\n\t\t\t\t\tif ( isConditionalSegments ) {\n\n\t\t\t\t\t\tmaterials.push( material.userData.edgeMaterial.userData.conditionalEdgeMaterial );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmaterials.push( material.userData.edgeMaterial );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// If a material has not been made available yet then keep the color code string in the material array\n\t\t\t\t// to save the spot for the material once a parent scopes materials are being applied to the object.\n\t\t\t\tmaterials.push( elem.colorCode );\n\n\t\t\t}\n\n\t\t\tprevMaterial = elem.colorCode;\n\t\t\tindex0 = offset / 3;\n\t\t\tnumGroupVerts = vertices.length;\n\n\t\t} else {\n\n\t\t\tnumGroupVerts += vertices.length;\n\n\t\t}\n\n\t\toffset += 3 * vertices.length;\n\n\t}\n\n\tif ( numGroupVerts > 0 ) {\n\n\t\tbufferGeometry.addGroup( index0, Infinity, materials.length - 1 );\n\n\t}\n\n\tbufferGeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\tif ( normals !== null ) {\n\n\t\tbufferGeometry.setAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\n\t}\n\n\tlet object3d = null;\n\n\tif ( elementSize === 2 ) {\n\n\t\tif ( isConditionalSegments ) {\n\n\t\t\tobject3d = new ConditionalLineSegments( bufferGeometry, materials.length === 1 ? materials[ 0 ] : materials );\n\n\t\t} else {\n\n\t\t\tobject3d = new LineSegments( bufferGeometry, materials.length === 1 ? materials[ 0 ] : materials );\n\n\t\t}\n\n\t} else if ( elementSize === 3 ) {\n\n\t\tobject3d = new Mesh( bufferGeometry, materials.length === 1 ? materials[ 0 ] : materials );\n\n\t}\n\n\tif ( isConditionalSegments ) {\n\n\t\tobject3d.isConditionalLine = true;\n\n\t\tconst controlArray0 = new Float32Array( elements.length * 3 * 2 );\n\t\tconst controlArray1 = new Float32Array( elements.length * 3 * 2 );\n\t\tconst directionArray = new Float32Array( elements.length * 3 * 2 );\n\t\tfor ( let i = 0, l = elements.length; i < l; i ++ ) {\n\n\t\t\tconst os = elements[ i ];\n\t\t\tconst vertices = os.vertices;\n\t\t\tconst controlPoints = os.controlPoints;\n\t\t\tconst c0 = controlPoints[ 0 ];\n\t\t\tconst c1 = controlPoints[ 1 ];\n\t\t\tconst v0 = vertices[ 0 ];\n\t\t\tconst v1 = vertices[ 1 ];\n\t\t\tconst index = i * 3 * 2;\n\t\t\tcontrolArray0[ index + 0 ] = c0.x;\n\t\t\tcontrolArray0[ index + 1 ] = c0.y;\n\t\t\tcontrolArray0[ index + 2 ] = c0.z;\n\t\t\tcontrolArray0[ index + 3 ] = c0.x;\n\t\t\tcontrolArray0[ index + 4 ] = c0.y;\n\t\t\tcontrolArray0[ index + 5 ] = c0.z;\n\n\t\t\tcontrolArray1[ index + 0 ] = c1.x;\n\t\t\tcontrolArray1[ index + 1 ] = c1.y;\n\t\t\tcontrolArray1[ index + 2 ] = c1.z;\n\t\t\tcontrolArray1[ index + 3 ] = c1.x;\n\t\t\tcontrolArray1[ index + 4 ] = c1.y;\n\t\t\tcontrolArray1[ index + 5 ] = c1.z;\n\n\t\t\tdirectionArray[ index + 0 ] = v1.x - v0.x;\n\t\t\tdirectionArray[ index + 1 ] = v1.y - v0.y;\n\t\t\tdirectionArray[ index + 2 ] = v1.z - v0.z;\n\t\t\tdirectionArray[ index + 3 ] = v1.x - v0.x;\n\t\t\tdirectionArray[ index + 4 ] = v1.y - v0.y;\n\t\t\tdirectionArray[ index + 5 ] = v1.z - v0.z;\n\n\t\t}\n\n\t\tbufferGeometry.setAttribute( 'control0', new BufferAttribute( controlArray0, 3, false ) );\n\t\tbufferGeometry.setAttribute( 'control1', new BufferAttribute( controlArray1, 3, false ) );\n\t\tbufferGeometry.setAttribute( 'direction', new BufferAttribute( directionArray, 3, false ) );\n\n\t}\n\n\treturn object3d;\n\n}\n\n//\n\nclass LDrawLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t// Array of THREE.Material\n\t\tthis.materials = [];\n\t\tthis.materialLibrary = {};\n\n\t\t// This also allows to handle the embedded text files (\"0 FILE\" lines)\n\t\tthis.partsCache = new LDrawPartsGeometryCache( this );\n\n\t\t// This object is a map from file names to paths. It agilizes the paths search. If it is not set then files will be searched by trial and error.\n\t\tthis.fileMap = {};\n\n\t\t// Initializes the materials library with default materials\n\t\tthis.setMaterials( [] );\n\n\t\t// If this flag is set to true the vertex normals will be smoothed.\n\t\tthis.smoothNormals = true;\n\n\t\t// The path to load parts from the LDraw parts library from.\n\t\tthis.partsLibraryPath = '';\n\n\t}\n\n\tsetPartsLibraryPath( path ) {\n\n\t\tthis.partsLibraryPath = path;\n\t\treturn this;\n\n\t}\n\n\tasync preloadMaterials( url ) {\n\n\t\tconst fileLoader = new FileLoader( this.manager );\n\t\tfileLoader.setPath( this.path );\n\t\tfileLoader.setRequestHeader( this.requestHeader );\n\t\tfileLoader.setWithCredentials( this.withCredentials );\n\n\t\tconst text = await fileLoader.loadAsync( url );\n\t\tconst colorLineRegex = /^0 !COLOUR/;\n\t\tconst lines = text.split( /[\\n\\r]/g );\n\t\tconst materials = [];\n\t\tfor ( let i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\tconst line = lines[ i ];\n\t\t\tif ( colorLineRegex.test( line ) ) {\n\n\t\t\t\tconst directive = line.replace( colorLineRegex, '' );\n\t\t\t\tconst material = this.parseColorMetaDirective( new LineParser( directive ) );\n\t\t\t\tmaterials.push( material );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setMaterials( materials );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst fileLoader = new FileLoader( this.manager );\n\t\tfileLoader.setPath( this.path );\n\t\tfileLoader.setRequestHeader( this.requestHeader );\n\t\tfileLoader.setWithCredentials( this.withCredentials );\n\t\tfileLoader.load( url, text => {\n\n\t\t\tthis.partsCache\n\t\t\t\t.parseModel( text, this.materialLibrary )\n\t\t\t\t.then( group => {\n\n\t\t\t\t\tthis.applyMaterialsToMesh( group, MAIN_COLOUR_CODE, this.materialLibrary, true );\n\t\t\t\t\tthis.computeConstructionSteps( group );\n\t\t\t\t\tonLoad( group );\n\n\t\t\t\t} )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( text, onLoad ) {\n\n\t\tthis.partsCache\n\t\t\t.parseModel( text, this.materialLibrary )\n\t\t\t.then( group => {\n\n\t\t\t\tthis.computeConstructionSteps( group );\n\t\t\t\tonLoad( group );\n\n\t\t\t} );\n\n\t}\n\n\tsetMaterials( materials ) {\n\n\t\tthis.materialLibrary = {};\n\t\tthis.materials = [];\n\t\tfor ( let i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tthis.addMaterial( materials[ i ] );\n\n\t\t}\n\n\t\t// Add default main triangle and line edge materials (used in pieces that can be colored with a main color)\n\t\tthis.addMaterial( this.parseColorMetaDirective( new LineParser( 'Main_Colour CODE 16 VALUE #FF8080 EDGE #333333' ) ) );\n\t\tthis.addMaterial( this.parseColorMetaDirective( new LineParser( 'Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333' ) ) );\n\n\t\treturn this;\n\n\t}\n\n\tsetFileMap( fileMap ) {\n\n\t\tthis.fileMap = fileMap;\n\n\t\treturn this;\n\n\t}\n\n\taddMaterial( material ) {\n\n\t\t// Adds a material to the material library which is on top of the parse scopes stack. And also to the materials array\n\n\t\tconst matLib = this.materialLibrary;\n\t\tif ( ! matLib[ material.userData.code ] ) {\n\n\t\t\tthis.materials.push( material );\n\t\t\tmatLib[ material.userData.code ] = material;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetMaterial( colorCode ) {\n\n\t\tif ( colorCode.startsWith( '0x2' ) ) {\n\n\t\t\t// Special 'direct' material value (RGB color)\n\t\t\tconst color = colorCode.substring( 3 );\n\n\t\t\treturn this.parseColorMetaDirective( new LineParser( 'Direct_Color_' + color + ' CODE -1 VALUE #' + color + ' EDGE #' + color + '' ) );\n\n\t\t}\n\n\t\treturn this.materialLibrary[ colorCode ] || null;\n\n\t}\n\n\t// Applies the appropriate materials to a prebuilt hierarchy of geometry. Assumes that color codes are present\n\t// in the material array if they need to be filled in.\n\tapplyMaterialsToMesh( group, parentColorCode, materialHierarchy, finalMaterialPass = false ) {\n\n\t\t// find any missing materials as indicated by a color code string and replace it with a material from the current material lib\n\t\tconst loader = this;\n\t\tconst parentIsPassthrough = parentColorCode === MAIN_COLOUR_CODE;\n\t\tgroup.traverse( c => {\n\n\t\t\tif ( c.isMesh || c.isLineSegments ) {\n\n\t\t\t\tif ( Array.isArray( c.material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, l = c.material.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tif ( ! c.material[ i ].isMaterial ) {\n\n\t\t\t\t\t\t\tc.material[ i ] = getMaterial( c, c.material[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( ! c.material.isMaterial ) {\n\n\t\t\t\t\tc.material = getMaterial( c, c.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\n\t\t// Returns the appropriate material for the object (line or face) given color code. If the code is \"pass through\"\n\t\t// (24 for lines, 16 for edges) then the pass through color code is used. If that is also pass through then it's\n\t\t// simply returned for the subsequent material application.\n\t\tfunction getMaterial( c, colorCode ) {\n\n\t\t\t// if our parent is a passthrough color code and we don't have the current material color available then\n\t\t\t// return early.\n\t\t\tif ( parentIsPassthrough && ! ( colorCode in materialHierarchy ) && ! finalMaterialPass ) {\n\n\t\t\t\treturn colorCode;\n\n\t\t\t}\n\n\t\t\tconst forEdge = c.isLineSegments || c.isConditionalLine;\n\t\t\tconst isPassthrough = ! forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\t\t\tif ( isPassthrough ) {\n\n\t\t\t\tcolorCode = parentColorCode;\n\n\t\t\t}\n\n\t\t\tlet material = null;\n\t\t\tif ( colorCode in materialHierarchy ) {\n\n\t\t\t\tmaterial = materialHierarchy[ colorCode ];\n\n\t\t\t} else if ( finalMaterialPass ) {\n\n\t\t\t\t// see if we can get the final material from from the \"getMaterial\" function which will attempt to\n\t\t\t\t// parse the \"direct\" colors\n\t\t\t\tmaterial = loader.getMaterial( colorCode );\n\t\t\t\tif ( material === null ) {\n\n\t\t\t\t\t// otherwise throw an error if this is final opportunity to set the material\n\t\t\t\t\tthrow new Error( `LDrawLoader: Material properties for code ${ colorCode } not available.` );\n\n\t\t\t\t}\n\n\n\t\t\t} else {\n\n\t\t\t\treturn colorCode;\n\n\t\t\t}\n\n\t\t\tif ( c.isLineSegments ) {\n\n\t\t\t\tmaterial = material.userData.edgeMaterial;\n\n\t\t\t\tif ( c.isConditionalLine ) {\n\n\t\t\t\t\tmaterial = material.userData.conditionalEdgeMaterial;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t}\n\n\tgetMainMaterial() {\n\n\t\treturn this.getMaterial( MAIN_COLOUR_CODE );\n\n\t}\n\n\tgetMainEdgeMaterial() {\n\n\t\tconst mainMat = this.getMainMaterial();\n\t\treturn mainMat && mainMat.userData ? mainMat.userData.edgeMaterial : null;\n\n\t}\n\n\tparseColorMetaDirective( lineParser ) {\n\n\t\t// Parses a color definition and returns a THREE.Material\n\n\t\tlet code = null;\n\n\t\t// Triangle and line colors\n\t\tlet color = 0xFF00FF;\n\t\tlet edgeColor = 0xFF00FF;\n\n\t\t// Transparency\n\t\tlet alpha = 1;\n\t\tlet isTransparent = false;\n\t\t// Self-illumination:\n\t\tlet luminance = 0;\n\n\t\tlet finishType = FINISH_TYPE_DEFAULT;\n\n\t\tlet edgeMaterial = null;\n\n\t\tconst name = lineParser.getToken();\n\t\tif ( ! name ) {\n\n\t\t\tthrow new Error( 'LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + '.' );\n\n\t\t}\n\n\t\t// Parse tag tokens and their parameters\n\t\tlet token = null;\n\t\twhile ( true ) {\n\n\t\t\ttoken = lineParser.getToken();\n\n\t\t\tif ( ! token ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( token.toUpperCase() ) {\n\n\t\t\t\tcase 'CODE':\n\n\t\t\t\t\tcode = lineParser.getToken();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'VALUE':\n\n\t\t\t\t\tcolor = lineParser.getToken();\n\t\t\t\t\tif ( color.startsWith( '0x' ) ) {\n\n\t\t\t\t\t\tcolor = '#' + color.substring( 2 );\n\n\t\t\t\t\t} else if ( ! color.startsWith( '#' ) ) {\n\n\t\t\t\t\t\tthrow new Error( 'LDrawLoader: Invalid color while parsing material' + lineParser.getLineNumberString() + '.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EDGE':\n\n\t\t\t\t\tedgeColor = lineParser.getToken();\n\t\t\t\t\tif ( edgeColor.startsWith( '0x' ) ) {\n\n\t\t\t\t\t\tedgeColor = '#' + edgeColor.substring( 2 );\n\n\t\t\t\t\t} else if ( ! edgeColor.startsWith( '#' ) ) {\n\n\t\t\t\t\t\t// Try to see if edge color is a color code\n\t\t\t\t\t\tedgeMaterial = this.getMaterial( edgeColor );\n\t\t\t\t\t\tif ( ! edgeMaterial ) {\n\n\t\t\t\t\t\t\tthrow new Error( 'LDrawLoader: Invalid edge color while parsing material' + lineParser.getLineNumberString() + '.' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Get the edge material for this triangle material\n\t\t\t\t\t\tedgeMaterial = edgeMaterial.userData.edgeMaterial;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ALPHA':\n\n\t\t\t\t\talpha = parseInt( lineParser.getToken() );\n\n\t\t\t\t\tif ( isNaN( alpha ) ) {\n\n\t\t\t\t\t\tthrow new Error( 'LDrawLoader: Invalid alpha value in material definition' + lineParser.getLineNumberString() + '.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\talpha = Math.max( 0, Math.min( 1, alpha / 255 ) );\n\n\t\t\t\t\tif ( alpha < 1 ) {\n\n\t\t\t\t\t\tisTransparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LUMINANCE':\n\n\t\t\t\t\tluminance = parseInt( lineParser.getToken() );\n\n\t\t\t\t\tif ( isNaN( luminance ) ) {\n\n\t\t\t\t\t\tthrow new Error( 'LDrawLoader: Invalid luminance value in material definition' + LineParser.getLineNumberString() + '.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tluminance = Math.max( 0, Math.min( 1, luminance / 255 ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'CHROME':\n\t\t\t\t\tfinishType = FINISH_TYPE_CHROME;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PEARLESCENT':\n\t\t\t\t\tfinishType = FINISH_TYPE_PEARLESCENT;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RUBBER':\n\t\t\t\t\tfinishType = FINISH_TYPE_RUBBER;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'MATTE_METALLIC':\n\t\t\t\t\tfinishType = FINISH_TYPE_MATTE_METALLIC;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'METAL':\n\t\t\t\t\tfinishType = FINISH_TYPE_METAL;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'MATERIAL':\n\t\t\t\t\t// Not implemented\n\t\t\t\t\tlineParser.setToEnd();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + '.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet material = null;\n\n\t\tswitch ( finishType ) {\n\n\t\t\tcase FINISH_TYPE_DEFAULT:\n\n\t\t\t\tmaterial = new MeshStandardMaterial( { color: color, roughness: 0.3, metalness: 0 } );\n\t\t\t\tbreak;\n\n\t\t\tcase FINISH_TYPE_PEARLESCENT:\n\n\t\t\t\t// Try to imitate pearlescency by making the surface glossy\n\t\t\t\tmaterial = new MeshStandardMaterial( { color: color, roughness: 0.3, metalness: 0.25 } );\n\t\t\t\tbreak;\n\n\t\t\tcase FINISH_TYPE_CHROME:\n\n\t\t\t\t// Mirror finish surface\n\t\t\t\tmaterial = new MeshStandardMaterial( { color: color, roughness: 0, metalness: 1 } );\n\t\t\t\tbreak;\n\n\t\t\tcase FINISH_TYPE_RUBBER:\n\n\t\t\t\t// Rubber finish\n\t\t\t\tmaterial = new MeshStandardMaterial( { color: color, roughness: 0.9, metalness: 0 } );\n\t\t\t\tbreak;\n\n\t\t\tcase FINISH_TYPE_MATTE_METALLIC:\n\n\t\t\t\t// Brushed metal finish\n\t\t\t\tmaterial = new MeshStandardMaterial( { color: color, roughness: 0.8, metalness: 0.4 } );\n\t\t\t\tbreak;\n\n\t\t\tcase FINISH_TYPE_METAL:\n\n\t\t\t\t// Average metal finish\n\t\t\t\tmaterial = new MeshStandardMaterial( { color: color, roughness: 0.2, metalness: 0.85 } );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Should not happen\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tmaterial.transparent = isTransparent;\n\t\tmaterial.premultipliedAlpha = true;\n\t\tmaterial.opacity = alpha;\n\t\tmaterial.depthWrite = ! isTransparent;\n\t\tmaterial.color.convertSRGBToLinear();\n\n\t\tmaterial.polygonOffset = true;\n\t\tmaterial.polygonOffsetFactor = 1;\n\n\t\tif ( luminance !== 0 ) {\n\n\t\t\tmaterial.emissive.set( material.color ).multiplyScalar( luminance );\n\n\t\t}\n\n\t\tif ( ! edgeMaterial ) {\n\n\t\t\t// This is the material used for edges\n\t\t\tedgeMaterial = new LineBasicMaterial( {\n\t\t\t\tcolor: edgeColor,\n\t\t\t\ttransparent: isTransparent,\n\t\t\t\topacity: alpha,\n\t\t\t\tdepthWrite: ! isTransparent\n\t\t\t} );\n\t\t\tedgeMaterial.userData.code = code;\n\t\t\tedgeMaterial.name = name + ' - Edge';\n\t\t\tedgeMaterial.color.convertSRGBToLinear();\n\n\t\t\t// This is the material used for conditional edges\n\t\t\tedgeMaterial.userData.conditionalEdgeMaterial = new LDrawConditionalLineMaterial( {\n\n\t\t\t\tfog: true,\n\t\t\t\ttransparent: isTransparent,\n\t\t\t\tdepthWrite: ! isTransparent,\n\t\t\t\tcolor: edgeColor,\n\t\t\t\topacity: alpha,\n\n\t\t\t} );\n\t\t\tedgeMaterial.userData.conditionalEdgeMaterial.color.convertSRGBToLinear();\n\n\t\t}\n\n\t\tmaterial.userData.code = code;\n\t\tmaterial.name = name;\n\n\t\tmaterial.userData.edgeMaterial = edgeMaterial;\n\n\t\tthis.addMaterial( material );\n\n\t\treturn material;\n\n\t}\n\n\tcomputeConstructionSteps( model ) {\n\n\t\t// Sets userdata.constructionStep number in Group objects and userData.numConstructionSteps number in the root Group object.\n\n\t\tlet stepNumber = 0;\n\n\t\tmodel.traverse( c => {\n\n\t\t\tif ( c.isGroup ) {\n\n\t\t\t\tif ( c.userData.startingConstructionStep ) {\n\n\t\t\t\t\tstepNumber ++;\n\n\t\t\t\t}\n\n\t\t\t\tc.userData.constructionStep = stepNumber;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tmodel.userData.numConstructionSteps = stepNumber + 1;\n\n\t}\n\n}\n\nexport { LDrawLoader };\n","import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tGroup,\n\tLineSegments,\n\tMatrix3,\n\tMesh\n} from 'three';\n\nimport { mergeBufferGeometries } from './BufferGeometryUtils.js';\n\nclass LDrawUtils {\n\n\tstatic mergeObject( object ) {\n\n\t\t// Merges geometries in object by materials and returns new object. Use on not indexed geometries.\n\t\t// The object buffers reference the old object ones.\n\t\t// Special treatment is done to the conditional lines generated by LDrawLoader.\n\n\t\tfunction extractGroup( geometry, group, elementSize, isConditionalLine ) {\n\n\t\t\t// Extracts a group from a geometry as a new geometry (with attribute buffers referencing original buffers)\n\n\t\t\tconst newGeometry = new BufferGeometry();\n\n\t\t\tconst originalPositions = geometry.getAttribute( 'position' ).array;\n\t\t\tconst originalNormals = elementSize === 3 ? geometry.getAttribute( 'normal' ).array : null;\n\n\t\t\tconst numVertsGroup = Math.min( group.count, Math.floor( originalPositions.length / 3 ) - group.start );\n\t\t\tconst vertStart = group.start * 3;\n\t\t\tconst vertEnd = ( group.start + numVertsGroup ) * 3;\n\n\t\t\tconst positions = originalPositions.subarray( vertStart, vertEnd );\n\t\t\tconst normals = originalNormals !== null ? originalNormals.subarray( vertStart, vertEnd ) : null;\n\n\t\t\tnewGeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t\t\tif ( normals !== null ) newGeometry.setAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\n\t\t\tif ( isConditionalLine ) {\n\n\t\t\t\tconst controlArray0 = geometry.getAttribute( 'control0' ).array.subarray( vertStart, vertEnd );\n\t\t\t\tconst controlArray1 = geometry.getAttribute( 'control1' ).array.subarray( vertStart, vertEnd );\n\t\t\t\tconst directionArray = geometry.getAttribute( 'direction' ).array.subarray( vertStart, vertEnd );\n\n\t\t\t\tnewGeometry.setAttribute( 'control0', new BufferAttribute( controlArray0, 3, false ) );\n\t\t\t\tnewGeometry.setAttribute( 'control1', new BufferAttribute( controlArray1, 3, false ) );\n\t\t\t\tnewGeometry.setAttribute( 'direction', new BufferAttribute( directionArray, 3, false ) );\n\n\t\t\t}\n\n\t\t\treturn newGeometry;\n\n\t\t}\n\n\t\tfunction addGeometry( mat, geometry, geometries ) {\n\n\t\t\tconst geoms = geometries[ mat.uuid ];\n\t\t\tif ( ! geoms ) {\n\n\t\t\t\tgeometries[ mat.uuid ] = {\n\t\t\t\t\tmat: mat,\n\t\t\t\t\tarr: [ geometry ]\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tgeoms.arr.push( geometry );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction permuteAttribute( attribute, elemSize ) {\n\n\t\t\t// Permutes first two vertices of each attribute element\n\n\t\t\tif ( ! attribute ) return;\n\n\t\t\tconst verts = attribute.array;\n\t\t\tconst numVerts = Math.floor( verts.length / 3 );\n\t\t\tlet offset = 0;\n\t\t\tfor ( let i = 0; i < numVerts; i ++ ) {\n\n\t\t\t\tconst x = verts[ offset ];\n\t\t\t\tconst y = verts[ offset + 1 ];\n\t\t\t\tconst z = verts[ offset + 2 ];\n\n\t\t\t\tverts[ offset ] = verts[ offset + 3 ];\n\t\t\t\tverts[ offset + 1 ] = verts[ offset + 4 ];\n\t\t\t\tverts[ offset + 2 ] = verts[ offset + 5 ];\n\n\t\t\t\tverts[ offset + 3 ] = x;\n\t\t\t\tverts[ offset + 4 ] = y;\n\t\t\t\tverts[ offset + 5 ] = z;\n\n\t\t\t\toffset += elemSize * 3;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Traverse the object hierarchy collecting geometries and transforming them to world space\n\n\t\tconst meshGeometries = {};\n\t\tconst linesGeometries = {};\n\t\tconst condLinesGeometries = {};\n\n\t\tobject.updateMatrixWorld( true );\n\t\tconst normalMatrix = new Matrix3();\n\n\t\tobject.traverse( c => {\n\n\t\t\tif ( c.isMesh | c.isLineSegments ) {\n\n\t\t\t\tconst elemSize = c.isMesh ? 3 : 2;\n\n\t\t\t\tconst geometry = c.geometry.clone();\n\t\t\t\tconst matrixIsInverted = c.matrixWorld.determinant() < 0;\n\t\t\t\tif ( matrixIsInverted ) {\n\n\t\t\t\t\tpermuteAttribute( geometry.attributes.position, elemSize );\n\t\t\t\t\tpermuteAttribute( geometry.attributes.normal, elemSize );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.applyMatrix4( c.matrixWorld );\n\n\t\t\t\tif ( c.isConditionalLine ) {\n\n\t\t\t\t\tgeometry.attributes.control0.applyMatrix4( c.matrixWorld );\n\t\t\t\t\tgeometry.attributes.control1.applyMatrix4( c.matrixWorld );\n\t\t\t\t\tnormalMatrix.getNormalMatrix( c.matrixWorld );\n\t\t\t\t\tgeometry.attributes.direction.applyNormalMatrix( normalMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tconst geometries = c.isMesh ? meshGeometries : ( c.isConditionalLine ? condLinesGeometries : linesGeometries );\n\n\t\t\t\tif ( Array.isArray( c.material ) ) {\n\n\t\t\t\t\tfor ( const groupIndex in geometry.groups ) {\n\n\t\t\t\t\t\tconst group = geometry.groups[ groupIndex ];\n\t\t\t\t\t\tconst mat = c.material[ group.materialIndex ];\n\t\t\t\t\t\tconst newGeometry = extractGroup( geometry, group, elemSize, c.isConditionalLine );\n\t\t\t\t\t\taddGeometry( mat, newGeometry, geometries );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\taddGeometry( c.material, geometry, geometries );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\t// Create object with merged geometries\n\n\t\tconst mergedObject = new Group();\n\n\t\tconst meshMaterialsIds = Object.keys( meshGeometries );\n\t\tfor ( const meshMaterialsId of meshMaterialsIds ) {\n\n\t\t\tconst meshGeometry = meshGeometries[ meshMaterialsId ];\n\t\t\tconst mergedGeometry = mergeBufferGeometries( meshGeometry.arr );\n\t\t\tmergedObject.add( new Mesh( mergedGeometry, meshGeometry.mat ) );\n\n\t\t}\n\n\t\tconst linesMaterialsIds = Object.keys( linesGeometries );\n\t\tfor ( const linesMaterialsId of linesMaterialsIds ) {\n\n\t\t\tconst lineGeometry = linesGeometries[ linesMaterialsId ];\n\t\t\tconst mergedGeometry = mergeBufferGeometries( lineGeometry.arr );\n\t\t\tmergedObject.add( new LineSegments( mergedGeometry, lineGeometry.mat ) );\n\n\t\t}\n\n\t\tconst condLinesMaterialsIds = Object.keys( condLinesGeometries );\n\t\tfor ( const condLinesMaterialsId of condLinesMaterialsIds ) {\n\n\t\t\tconst condLineGeometry = condLinesGeometries[ condLinesMaterialsId ];\n\t\t\tconst mergedGeometry = mergeBufferGeometries( condLineGeometry.arr );\n\t\t\tconst condLines = new LineSegments( mergedGeometry, condLineGeometry.mat );\n\t\t\tcondLines.isConditionalLine = true;\n\t\t\tmergedObject.add( condLines );\n\n\t\t}\n\n\t\tmergedObject.userData.constructionStep = 0;\n\t\tmergedObject.userData.numConstructionSteps = 1;\n\n\t\treturn mergedObject;\n\n\t}\n\n}\n\nexport { LDrawUtils };\n","var Stats = function () {\n\n\tvar mode = 0;\n\n\tvar container = document.createElement( 'div' );\n\tcontainer.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\n\tcontainer.addEventListener( 'click', function ( event ) {\n\n\t\tevent.preventDefault();\n\t\tshowPanel( ++ mode % container.children.length );\n\n\t}, false );\n\n\t//\n\n\tfunction addPanel( panel ) {\n\n\t\tcontainer.appendChild( panel.dom );\n\t\treturn panel;\n\n\t}\n\n\tfunction showPanel( id ) {\n\n\t\tfor ( var i = 0; i < container.children.length; i ++ ) {\n\n\t\t\tcontainer.children[ i ].style.display = i === id ? 'block' : 'none';\n\n\t\t}\n\n\t\tmode = id;\n\n\t}\n\n\t//\n\n\tvar beginTime = ( performance || Date ).now(), prevTime = beginTime, frames = 0;\n\n\tvar fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) );\n\tvar msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) );\n\n\tif ( self.performance && self.performance.memory ) {\n\n\t\tvar memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) );\n\n\t}\n\n\tshowPanel( 0 );\n\n\treturn {\n\n\t\tREVISION: 16,\n\n\t\tdom: container,\n\n\t\taddPanel: addPanel,\n\t\tshowPanel: showPanel,\n\n\t\tbegin: function () {\n\n\t\t\tbeginTime = ( performance || Date ).now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tframes ++;\n\n\t\t\tvar time = ( performance || Date ).now();\n\n\t\t\tmsPanel.update( time - beginTime, 200 );\n\n\t\t\tif ( time >= prevTime + 1000 ) {\n\n\t\t\t\tfpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t\tif ( memPanel ) {\n\n\t\t\t\t\tvar memory = performance.memory;\n\t\t\t\t\tmemPanel.update( memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tbeginTime = this.end();\n\n\t\t},\n\n\t\t// Backwards Compatibility\n\n\t\tdomElement: container,\n\t\tsetMode: showPanel\n\n\t};\n\n};\n\nStats.Panel = function ( name, fg, bg ) {\n\n\tvar min = Infinity, max = 0, round = Math.round;\n\tvar PR = round( window.devicePixelRatio || 1 );\n\n\tvar WIDTH = 80 * PR, HEIGHT = 48 * PR,\n\t\tTEXT_X = 3 * PR, TEXT_Y = 2 * PR,\n\t\tGRAPH_X = 3 * PR, GRAPH_Y = 15 * PR,\n\t\tGRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n\n\tvar canvas = document.createElement( 'canvas' );\n\tcanvas.width = WIDTH;\n\tcanvas.height = HEIGHT;\n\tcanvas.style.cssText = 'width:80px;height:48px';\n\n\tvar context = canvas.getContext( '2d' );\n\tcontext.font = 'bold ' + ( 9 * PR ) + 'px Helvetica,Arial,sans-serif';\n\tcontext.textBaseline = 'top';\n\n\tcontext.fillStyle = bg;\n\tcontext.fillRect( 0, 0, WIDTH, HEIGHT );\n\n\tcontext.fillStyle = fg;\n\tcontext.fillText( name, TEXT_X, TEXT_Y );\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\tcontext.fillStyle = bg;\n\tcontext.globalAlpha = 0.9;\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\treturn {\n\n\t\tdom: canvas,\n\n\t\tupdate: function ( value, maxValue ) {\n\n\t\t\tmin = Math.min( min, value );\n\t\t\tmax = Math.max( max, value );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 1;\n\t\t\tcontext.fillRect( 0, 0, WIDTH, GRAPH_Y );\n\t\t\tcontext.fillStyle = fg;\n\t\t\tcontext.fillText( round( value ) + ' ' + name + ' (' + round( min ) + '-' + round( max ) + ')', TEXT_X, TEXT_Y );\n\n\t\t\tcontext.drawImage( canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 0.9;\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round( ( 1 - ( value / maxValue ) ) * GRAPH_HEIGHT ) );\n\n\t\t}\n\n\t};\n\n};\n\nexport default Stats;\n"],"names":["$ilwiq","parcelRequire","$90a1bf3572dc4d5f$var$_tempVec0","Vector3","$90a1bf3572dc4d5f$var$_tempVec1","$90a1bf3572dc4d5f$var$LDrawConditionalLineMaterial","ShaderMaterial","constructor","parameters","super","uniforms","UniformsUtils","merge","UniformsLib","fog","diffuse","value","Color","opacity","vertexShader","fragmentShader","Object","defineProperties","this","get","set","color","setValues","isLDrawConditionalLineMaterial","$90a1bf3572dc4d5f$var$ConditionalLineSegments","LineSegments","geometry","material","isConditionalLine","$90a1bf3572dc4d5f$var$_ray","Ray","$90a1bf3572dc4d5f$var$isPartType","type","$90a1bf3572dc4d5f$var$LineParser","line","lineNumber","lineLength","length","currentCharIndex","currentChar","seekNonSpace","charAt","getToken","pos0","pos1","substring","getVector","parseFloat","getRemainingString","isAtTheEnd","setToEnd","getLineNumberString","$90a1bf3572dc4d5f$var$LDrawParsedCache","loader","_cache","cloneResult","original","result","faces","map","face","colorCode","vertices","v","clone","normals","faceNormal","conditionalSegments","controlPoints","lineSegments","category","keywords","subobjects","totalFaces","startingConstructionStep","materials","group","async","fileName","triedLowerCase","locationState","subobjectURL","lastIndexOf","toLowerCase","fileLoader","FileLoader","manager","setPath","partsLibraryPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","loadAsync","Error","parse","text","getLocalMaterial","indexOf","replace","lines","split","numLines","parsingEmbeddedFiles","currentEmbeddedFileName","currentEmbeddedText","bfcCertified","bfcCCW","bfcInverted","bfcCull","lineIndex","startsWith","setData","lp","lineType","segment","ccw","doubleSided","v0","v1","v2","v3","c0","c1","meta","parseColorMetaDirective","userData","code","console","warn","newKeywords","forEach","keyword","push","trim","token","posX","posY","posZ","m0","m1","m2","m3","m4","m5","m6","m7","m8","matrix","Matrix4","fileMap","inverted","getData","key","Promise","fetchData","then","info","$90a1bf3572dc4d5f$var$getMaterialFromCode","parentColorCode","materialHierarchy","forEdge","$90a1bf3572dc4d5f$var$LDrawPartsGeometryCache","parseCache","info1","faceMaterials","Set","processInfoSubobjects","subobject","promises","i","l","promise","ensureDataLoaded","subobjectInfo","test","loadModel","catch","error","Group","subobjectInfos","all","i3","l3","isGroup","subobjectGroup","decompose","position","quaternion","scale","name","applyMaterialsToMesh","add","children","parentLineSegments","parentConditionalSegments","parentFaces","matrixScaleInverted","determinant","lineColorCode","ls","applyMatrix4","i5","l5","os","i6","l6","tri","reverse","i4","l4","smoothNormals","checkSubSegments","size","subVectors","crossVectors","normalize","$90a1bf3572dc4d5f$var$generateFaceNormals","hashMultiplier","hashVertex","x","y","z","hashEdge","toNormalizedRay","targetRay","direction","scalar","dot","origin","copy","addScaledVector","hashRay","ray","hardEdges","hardEdgeRays","Map","halfEdgeList","rh1","has","rh2","distances","d0","d1","i1","l1","vertCount","i2","index","next","hash","rayHash","found","halfEdge","queue","pop","vertNormals","reverseHash","otherInfo","otherTri","otherIndex","otherNormals","otherVertCount","otherFaceNormal","Math","abs","otherNext","norm","sharedNormal1","sharedNormal2","l2","$90a1bf3572dc4d5f$var$smoothNormals","group1","$90a1bf3572dc4d5f$var$createObject","hasCachedModel","getCachedModel","processIntoMesh","$90a1bf3572dc4d5f$var$sortByMaterial","a","b","elements","elementSize","isConditionalSegments","totalElements","sort","positions","Float32Array","quadArray","Array","bufferGeometry","BufferGeometry","prevMaterial","index0","numGroupVerts","offset","iElem","nElem","elem","j","elemNormals","n","addGroup","edgeMaterial","conditionalEdgeMaterial","Infinity","setAttribute","BufferAttribute","object3d","Mesh","controlArray0","controlArray1","directionArray","$90a1bf3572dc4d5f$export$12d9a9ad6192c950","Loader","materialLibrary","partsCache","setMaterials","setPartsLibraryPath","path","url","colorLineRegex","directive","load","onLoad","onProgress","onError","parseModel","computeConstructionSteps","addMaterial","setFileMap","matLib","getMaterial","finalMaterialPass","parentIsPassthrough","c","isLineSegments","traverse","isMesh","isArray","isMaterial","getMainMaterial","getMainEdgeMaterial","mainMat","lineParser","edgeColor","alpha","isTransparent","luminance","finishType","toUpperCase","parseInt","isNaN","max","min","MeshStandardMaterial","roughness","metalness","transparent","premultipliedAlpha","depthWrite","convertSRGBToLinear","polygonOffset","polygonOffsetFactor","emissive","multiplyScalar","LineBasicMaterial","model","stepNumber","constructionStep","numConstructionSteps","$5aae44c9b1864d53$var$Stats","mode","container","document","createElement","addPanel","panel","appendChild","dom","showPanel","id","style","display","cssText","addEventListener","event","preventDefault","beginTime","performance","Date","now","prevTime","frames","fpsPanel","Panel","msPanel","self","memory","memPanel","REVISION","begin","end","time","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","fg","bg","round","PR","window","devicePixelRatio","WIDTH","HEIGHT","TEXT_X","TEXT_Y","GRAPH_X","GRAPH_Y","GRAPH_WIDTH","GRAPH_HEIGHT","canvas","width","height","context","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","maxValue","drawImage","$5aae44c9b1864d53$export$2e2bcd8739ae039","$393e677ed3c566ae$var$envMaps","Overpass","Kloppenheim","Autoshop","$393e677ed3c566ae$var$models","MODEL_LIST","$393e677ed3c566ae$var$initialModel","keys","location","modelName","replaceAll","$393e677ed3c566ae$var$params","multipleImportanceSampling","acesToneMapping","resolutionScale","tilesX","tilesY","samplesPerFrame","envMap","gradientTop","gradientBottom","environmentIntensity","environmentBlur","environmentRotation","backgroundType","bgGradientTop","bgGradientBottom","backgroundAlpha","checkerboardTransparency","enable","bounces","pause","floorColor","floorOpacity","floorRoughness","floorMetalness","$393e677ed3c566ae$var$creditEl","$393e677ed3c566ae$var$loadingEl","$393e677ed3c566ae$var$samplesEl","$393e677ed3c566ae$var$floorPlane","$393e677ed3c566ae$var$gui","$393e677ed3c566ae$var$stats","$393e677ed3c566ae$var$sceneInfo","$393e677ed3c566ae$var$renderer","$393e677ed3c566ae$var$camera","$393e677ed3c566ae$var$ptRenderer","$393e677ed3c566ae$var$fsQuad","$393e677ed3c566ae$var$controls","$393e677ed3c566ae$var$scene","$393e677ed3c566ae$var$envMap","$393e677ed3c566ae$var$envMapGenerator","$393e677ed3c566ae$var$loadingModel","$393e677ed3c566ae$var$delaySamples","$393e677ed3c566ae$var$animate","requestAnimationFrame","samples","render","floor","innerText","updateFrom","textures","filterGlossyFactor","physicalCamera","updateMatrixWorld","autoClear","$393e677ed3c566ae$var$onResize","w","innerWidth","h","innerHeight","dpr","setSize","reset","setPixelRatio","aspect","updateProjectionMatrix","$393e677ed3c566ae$var$updateEnvMap","$891vQ","RGBELoader","texture","environmentMap","environment","dispose","$393e677ed3c566ae$var$updateEnvBlur","blurredEnvMap","generate","envMapInfo","background","$393e677ed3c566ae$var$updateModel","body","classList","remove","destroy","LoadingManager","modelInfo","visibility","isTexture","scene","onFinish","removeEmission","emissiveMap","emissiveIntensity","opacityToTransmission","newMaterial","MeshPhysicalMaterial","transmission","$393e677ed3c566ae$var$convertOpacityToTransmission","side","DoubleSide","postProcess","rotation","box","Box3","setFromObject","sphere","Sphere","getBoundingSphere","setScalar","radius","$4CEV9","MaterialReducer","process","generator","$cVdfP","PathTracingSceneWorker","percent","bvh","normalAttribute","attributes","normal","tangentAttribute","tangent","uvAttribute","uv","materialIndexAttribute","materialIndex","setTextures","innerHTML","credit","$jiuw3","GUI","onChange","pathTracingFolder","addFolder","setDefine","Number","toneMapping","ACESFilmicToneMapping","NoToneMapping","resolutionFolder","tiles","open","environmentFolder","PI","setFromMatrix4","makeRotationY","backgroundFolder","addColor","floorFolder","close","$393e677ed3c566ae$var$buildGui","$7lx9d","GLTFLoader","setMeshoptDecoder","$kp7Te","MeshoptDecoder","gltf","progress","total","loaded","preloadMaterials","static","object","extractGroup","newGeometry","originalPositions","getAttribute","array","originalNormals","numVertsGroup","count","start","vertStart","vertEnd","subarray","addGeometry","mat","geometries","geoms","uuid","arr","permuteAttribute","attribute","elemSize","verts","numVerts","meshGeometries","linesGeometries","condLinesGeometries","normalMatrix","Matrix3","matrixWorld","control0","control1","getNormalMatrix","applyNormalMatrix","groupIndex","groups","mergedObject","meshMaterialsIds","meshMaterialsId","meshGeometry","mergedGeometry","$7ePFa","mergeBufferGeometries","linesMaterialsIds","linesMaterialsId","lineGeometry","condLinesMaterialsIds","condLinesMaterialsId","condLineGeometry","condLines","mergeObject","visible","getElementById","WebGLRenderer","antialias","outputEncoding","sRGBEncoding","Scene","PerspectiveCamera","PathTracingRenderer","camera","PhysicalPathTracingMaterial","$RPVlj","FullScreenQuad","MeshBasicMaterial","target","blending","CustomBlending","$5Rd1x","OrbitControls","BlurredEnvMapGenerator","floorTex","$1EdOY","generateRadialFloorTexture","PlaneBufferGeometry","physicallyCorrectLights","$393e677ed3c566ae$var$init"],"version":3,"file":"index.7e44f4ab.js.map"}