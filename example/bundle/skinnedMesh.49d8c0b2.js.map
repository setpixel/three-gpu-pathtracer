{"mappings":"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","sources":["example/skinnedMesh.js"],"sourcesContent":["import * as THREE from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { DynamicPathTracingSceneGenerator, PathTracingRenderer, PhysicalPathTracingMaterial, BlurredEnvMapGenerator } from '../src/index.js';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';\nimport { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport { generateRadialFloorTexture } from './utils/generateRadialFloorTexture.js';\n\nlet renderer, controls, sceneInfo, ptRenderer, camera, fsQuad, scene, clock, model;\nlet samplesEl;\nlet counter = 0;\nconst params = {\n\n\tenvironmentIntensity: 3,\n\temissiveIntensity: 100,\n\tbounces: 3,\n\tsamplesPerFrame: 1,\n\tresolutionScale: 1 / window.devicePixelRatio,\n\ttiles: 1,\n\tautoPause: true,\n\tpause: false,\n\tcontinuous: false,\n\n};\n\n// clamp value for mobile\nconst aspectRatio = window.innerWidth / window.innerHeight;\nif ( aspectRatio < 0.65 ) {\n\n\tparams.resolutionScale *= 0.5;\n\tparams.tiles = 2;\n\n}\n\ninit();\n\nasync function init() {\n\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.toneMapping = THREE.ACESFilmicToneMapping;\n\tdocument.body.appendChild( renderer.domElement );\n\n\tscene = new THREE.Scene();\n\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.025, 500 );\n\tcamera.position.set( 5.5, 3.5, 7.5 );\n\n\tptRenderer = new PathTracingRenderer( renderer );\n\tptRenderer.camera = camera;\n\tptRenderer.material = new PhysicalPathTracingMaterial();\n\tptRenderer.material.filterGlossyFactor = 0.25;\n\tptRenderer.material.setDefine( 'FEATURE_MIS', 0 );\n\tptRenderer.tiles.set( params.tiles, params.tiles );\n\n\tfsQuad = new FullScreenQuad( new THREE.MeshBasicMaterial( {\n\t\tmap: ptRenderer.target.texture,\n\t\ttransparent: true,\n\t} ) );\n\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\tcontrols.target.set( - 0.15, 2, - 0.08 );\n\tcamera.lookAt( controls.target );\n\tcontrols.addEventListener( 'change', () => {\n\n\t\tptRenderer.reset();\n\n\t} );\n\tcontrols.update();\n\n\tsamplesEl = document.getElementById( 'samples' );\n\n\tclock = new THREE.Clock();\n\n\tconst envMapPromise = new Promise( resolve => {\n\n\t\tnew RGBELoader()\n\t\t\t.load( 'https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/equirectangular/royal_esplanade_1k.hdr', texture => {\n\n\t\t\t\tconst generator = new BlurredEnvMapGenerator( renderer );\n\t\t\t\tconst blurredTex = generator.generate( texture, 0.35 );\n\t\t\t\tptRenderer.material.envMapInfo.updateFrom( blurredTex );\n\t\t\t\tgenerator.dispose();\n\n\t\t\t\tscene.background = blurredTex;\n\t\t\t\tscene.environment = blurredTex;\n\n\t\t\t\tresolve();\n\n\t\t\t} );\n\n\t} );\n\n\tif ( window.location.hash === '#morphtarget' ) {\n\n\t\tmodel = await loadModel( 'https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/models/gltf/RobotExpressive/RobotExpressive.glb' );\n\n\t} else {\n\n\t\tmodel = await loadModel( 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/main/models/trex/scene.gltf' );\n\n\t}\n\n\t// model = await loadModel( 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/main/models/pigman/scene.gltf' );\n\tscene.add( model.scene );\n\n\tawait envMapPromise;\n\n\tdocument.getElementById( 'loading' ).remove();\n\n\tonResize();\n\twindow.addEventListener( 'resize', onResize );\n\n\tconst gui = new GUI();\n\tgui.add( params, 'tiles', 1, 4, 1 ).onChange( value => {\n\n\t\tptRenderer.tiles.set( value, value );\n\n\t} );\n\tgui.add( params, 'samplesPerFrame', 1, 10, 1 );\n\tgui.add( params, 'environmentIntensity', 0, 10 ).onChange( () => {\n\n\t\tptRenderer.reset();\n\n\t} );\n\tgui.add( params, 'bounces', 1, 5, 1 ).onChange( () => {\n\n\t\tptRenderer.reset();\n\n\t} );\n\tgui.add( params, 'resolutionScale', 0.1, 1 ).onChange( () => {\n\n\t\tonResize();\n\n\t} );\n\tgui.add( params, 'autoPause' ).listen();\n\tgui.add( params, 'pause' ).onChange( v => {\n\n\t\tparams.autoPause = false;\n\t\tsetPause( v );\n\n\t} ).listen();\n\tgui.add( params, 'continuous' ).onChange( () => {\n\n\t\tparams.autoPause = false;\n\n\t} );\n\n\tanimate();\n\n}\n\nfunction setPause( v ) {\n\n\tmodel.action.paused = v;\n\tparams.pause = v;\n\tif ( v ) {\n\n\t\tregenerateScene();\n\n\t}\n\n}\n\nfunction loadModel( url ) {\n\n\tconst gltfPromise = new GLTFLoader()\n\t\t.setMeshoptDecoder( MeshoptDecoder )\n\t\t.loadAsync( url )\n\t\t.then( gltf => {\n\n\t\t\t// make the model white since the texture seems to dark for the env map\n\t\t\tgltf.scene.traverse( c => {\n\n\t\t\t\tif ( c.material ) {\n\n\t\t\t\t\tc.material.metalness = 0;\n\t\t\t\t\tc.material.map = null;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\t// animations\n\t\t\tconst animations = gltf.animations;\n\t\t\tconst mixer = new THREE.AnimationMixer( gltf.scene );\n\n\t\t\tconst action = mixer.clipAction( animations[ 0 ] );\n\t\t\taction.play();\n\t\t\taction.paused = params.pause;\n\n\t\t\t// add floor\n\t\t\tconst group = new THREE.Group();\n\t\t\tgroup.add( gltf.scene );\n\n\t\t\tconst floorTex = generateRadialFloorTexture( 2048 );\n\t\t\tconst floorPlane = new THREE.Mesh(\n\t\t\t\tnew THREE.PlaneBufferGeometry(),\n\t\t\t\tnew THREE.MeshStandardMaterial( {\n\t\t\t\t\tmap: floorTex,\n\t\t\t\t\ttransparent: true,\n\t\t\t\t\tcolor: 0xdddddd,\n\t\t\t\t\troughness: 0.025,\n\t\t\t\t\tmetalness: 1.0\n\t\t\t\t} )\n\t\t\t);\n\t\t\tfloorPlane.scale.setScalar( 50 );\n\t\t\tfloorPlane.rotation.x = - Math.PI / 2;\n\t\t\tfloorPlane.position.y = 0.075;\n\t\t\tgroup.add( floorPlane );\n\n\t\t\t// create the scene generator for updating skinned meshes quickly\n\t\t\tconst sceneGenerator = new DynamicPathTracingSceneGenerator( group );\n\n\t\t\treturn {\n\t\t\t\tscene: group,\n\t\t\t\tsceneGenerator,\n\t\t\t\tmixer,\n\t\t\t\taction,\n\t\t\t};\n\n\t\t} );\n\n\treturn gltfPromise;\n\n}\n\n\nfunction onResize() {\n\n\tconst w = window.innerWidth;\n\tconst h = window.innerHeight;\n\tconst scale = params.resolutionScale;\n\tconst dpr = window.devicePixelRatio;\n\n\tptRenderer.setSize( w * scale * dpr, h * scale * dpr );\n\tptRenderer.reset();\n\n\trenderer.setSize( w, h );\n\trenderer.setPixelRatio( window.devicePixelRatio * scale );\n\tcamera.aspect = w / h;\n\tcamera.updateProjectionMatrix();\n\n}\n\nfunction regenerateScene() {\n\n\tconst { scene, sceneGenerator } = model;\n\tconst result = sceneGenerator.generate( scene );\n\tsceneInfo = result;\n\n\tconst { bvh, textures, materials } = result;\n\tconst geometry = bvh.geometry;\n\tconst material = ptRenderer.material;\n\n\tmaterial.bvh.updateFrom( bvh );\n\tmaterial.normalAttribute.updateFrom( geometry.attributes.normal );\n\tmaterial.tangentAttribute.updateFrom( geometry.attributes.tangent );\n\tmaterial.uvAttribute.updateFrom( geometry.attributes.uv );\n\tmaterial.materialIndexAttribute.updateFrom( geometry.attributes.materialIndex );\n\tmaterial.textures.setTextures( renderer, 2048, 2048, textures );\n\tmaterial.materials.updateFrom( materials, textures );\n\n\tptRenderer.reset();\n\n}\n\nfunction animate() {\n\n\trequestAnimationFrame( animate );\n\n\tconst delta = Math.min( clock.getDelta(), 30 * 0.001 );\n\tmodel.mixer.update( delta );\n\tmodel.scene.updateMatrixWorld();\n\n\tif ( params.autoPause ) {\n\n\t\tcounter += delta;\n\t\tif ( ! params.pause && counter >= 2.5 || params.pause && counter >= 5 ) {\n\n\t\t\tsetPause( ! params.pause );\n\t\t\tcounter = 0;\n\n\t\t}\n\n\t} else {\n\n\t\tcounter = 0;\n\n\t}\n\n\tif ( ! params.pause && ! params.continuous ) {\n\n\t\trenderer.render( scene, camera );\n\n\t} else {\n\n\t\tif ( ! params.pause && params.continuous ) {\n\n\t\t\tregenerateScene();\n\n\t\t}\n\n\t\tptRenderer.material.materials.updateFrom( sceneInfo.materials, sceneInfo.textures );\n\t\tptRenderer.material.environmentIntensity = params.environmentIntensity;\n\t\tptRenderer.material.environmentBlur = 0.35;\n\t\tptRenderer.material.bounces = params.bounces;\n\n\t\tcamera.updateMatrixWorld();\n\n\t\tfor ( let i = 0, l = params.samplesPerFrame; i < l; i ++ ) {\n\n\t\t\tptRenderer.update();\n\n\t\t}\n\n\t\trenderer.autoClear = false;\n\t\tfsQuad.render( renderer );\n\t\trenderer.autoClear = true;\n\n\t\tsamplesEl.innerText = `Samples: ${ Math.floor( ptRenderer.samples ) }`;\n\n\t}\n\n}\n"],"names":["$ilwiq","parcelRequire","$f06a0a82aa9331ef$var$renderer","$f06a0a82aa9331ef$var$controls","$f06a0a82aa9331ef$var$sceneInfo","$f06a0a82aa9331ef$var$ptRenderer","$f06a0a82aa9331ef$var$camera","$f06a0a82aa9331ef$var$fsQuad","$f06a0a82aa9331ef$var$scene","$f06a0a82aa9331ef$var$clock","$f06a0a82aa9331ef$var$model","$f06a0a82aa9331ef$var$samplesEl","$f06a0a82aa9331ef$var$counter","$f06a0a82aa9331ef$var$params","environmentIntensity","emissiveIntensity","bounces","samplesPerFrame","resolutionScale","window","devicePixelRatio","tiles","autoPause","pause","continuous","$f06a0a82aa9331ef$var$setPause","v","action","paused","$f06a0a82aa9331ef$var$regenerateScene","$f06a0a82aa9331ef$var$loadModel","url","$7lx9d","GLTFLoader","setMeshoptDecoder","$kp7Te","MeshoptDecoder","loadAsync","then","gltf","scene","traverse","c","material","metalness","map","animations","mixer","AnimationMixer","clipAction","play","group","Group","add","floorTex","$1EdOY","generateRadialFloorTexture","floorPlane","Mesh","PlaneBufferGeometry","MeshStandardMaterial","transparent","color","roughness","scale","setScalar","rotation","x","Math","PI","position","y","sceneGenerator","$4CEV9","DynamicPathTracingSceneGenerator","$f06a0a82aa9331ef$var$onResize","w","innerWidth","h","innerHeight","dpr","setSize","reset","setPixelRatio","aspect","updateProjectionMatrix","result","generate","bvh","textures","materials","geometry","updateFrom","normalAttribute","attributes","normal","tangentAttribute","tangent","uvAttribute","uv","materialIndexAttribute","materialIndex","setTextures","$f06a0a82aa9331ef$var$animate","requestAnimationFrame","delta","min","getDelta","update","updateMatrixWorld","environmentBlur","i","l","autoClear","render","innerText","floor","samples","async","WebGLRenderer","antialias","toneMapping","ACESFilmicToneMapping","document","body","appendChild","domElement","Scene","PerspectiveCamera","set","PathTracingRenderer","camera","PhysicalPathTracingMaterial","filterGlossyFactor","setDefine","$RPVlj","FullScreenQuad","MeshBasicMaterial","target","texture","$5Rd1x","OrbitControls","lookAt","addEventListener","getElementById","Clock","envMapPromise","Promise","resolve","$891vQ","RGBELoader","load","generator","BlurredEnvMapGenerator","blurredTex","envMapInfo","dispose","background","environment","location","hash","remove","gui","$jiuw3","GUI","onChange","value","listen","$f06a0a82aa9331ef$var$init"],"version":3,"file":"skinnedMesh.49d8c0b2.js.map"}